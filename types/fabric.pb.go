// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/lightclientd/fabric/v1/fabric.proto

package types

import (
	context "context"
	fmt "fmt"
	_go "github.com/confio/ics23/go"
	types1 "github.com/cosmos/cosmos-sdk/x/ibc/core/02-client/types"
	types3 "github.com/cosmos/cosmos-sdk/x/ibc/core/03-connection/types"
	types4 "github.com/cosmos/cosmos-sdk/x/ibc/core/04-channel/types"
	types2 "github.com/cosmos/cosmos-sdk/x/ibc/core/23-commitment/types"
	types "github.com/datachainlab/fabric-ibc/x/ibc/light-clients/xx-fabric/types"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// State
type State struct {
	ClientState     *types.ClientState               `protobuf:"bytes,1,opt,name=client_state,json=clientState,proto3" json:"client_state,omitempty"`
	ConsensusStates map[uint64]*types.ConsensusState `protobuf:"bytes,2,rep,name=consensus_states,json=consensusStates,proto3" json:"consensus_states,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *State) Reset()         { *m = State{} }
func (m *State) String() string { return proto.CompactTextString(m) }
func (*State) ProtoMessage()    {}
func (*State) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{0}
}
func (m *State) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *State) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_State.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *State) XXX_Merge(src proto.Message) {
	xxx_messageInfo_State.Merge(m, src)
}
func (m *State) XXX_Size() int {
	return m.Size()
}
func (m *State) XXX_DiscardUnknown() {
	xxx_messageInfo_State.DiscardUnknown(m)
}

var xxx_messageInfo_State proto.InternalMessageInfo

func (m *State) GetClientState() *types.ClientState {
	if m != nil {
		return m.ClientState
	}
	return nil
}

func (m *State) GetConsensusStates() map[uint64]*types.ConsensusState {
	if m != nil {
		return m.ConsensusStates
	}
	return nil
}

// TODO: replace this with Google's google.rpc.Status ( https://github.com/googleapis/googleapis/blob/master/google/rpc/status.proto )
// Error
type Error struct {
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{1}
}
func (m *Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(m, src)
}
func (m *Error) XXX_Size() int {
	return m.Size()
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// rpc ClientType
type ClientTypeRequest struct {
	State *State `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *ClientTypeRequest) Reset()         { *m = ClientTypeRequest{} }
func (m *ClientTypeRequest) String() string { return proto.CompactTextString(m) }
func (*ClientTypeRequest) ProtoMessage()    {}
func (*ClientTypeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{2}
}
func (m *ClientTypeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientTypeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientTypeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientTypeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientTypeRequest.Merge(m, src)
}
func (m *ClientTypeRequest) XXX_Size() int {
	return m.Size()
}
func (m *ClientTypeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientTypeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClientTypeRequest proto.InternalMessageInfo

func (m *ClientTypeRequest) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

type ClientTypeResponse struct {
	ClientType string `protobuf:"bytes,1,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"`
}

func (m *ClientTypeResponse) Reset()         { *m = ClientTypeResponse{} }
func (m *ClientTypeResponse) String() string { return proto.CompactTextString(m) }
func (*ClientTypeResponse) ProtoMessage()    {}
func (*ClientTypeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{3}
}
func (m *ClientTypeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientTypeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientTypeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientTypeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientTypeResponse.Merge(m, src)
}
func (m *ClientTypeResponse) XXX_Size() int {
	return m.Size()
}
func (m *ClientTypeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientTypeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ClientTypeResponse proto.InternalMessageInfo

func (m *ClientTypeResponse) GetClientType() string {
	if m != nil {
		return m.ClientType
	}
	return ""
}

// rpc GetLatestHeight
type GetLatestHeightRequest struct {
	State *State `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *GetLatestHeightRequest) Reset()         { *m = GetLatestHeightRequest{} }
func (m *GetLatestHeightRequest) String() string { return proto.CompactTextString(m) }
func (*GetLatestHeightRequest) ProtoMessage()    {}
func (*GetLatestHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{4}
}
func (m *GetLatestHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLatestHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLatestHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLatestHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLatestHeightRequest.Merge(m, src)
}
func (m *GetLatestHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetLatestHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLatestHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetLatestHeightRequest proto.InternalMessageInfo

func (m *GetLatestHeightRequest) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

type GetLatestHeightResponse struct {
	Height *types1.Height `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *GetLatestHeightResponse) Reset()         { *m = GetLatestHeightResponse{} }
func (m *GetLatestHeightResponse) String() string { return proto.CompactTextString(m) }
func (*GetLatestHeightResponse) ProtoMessage()    {}
func (*GetLatestHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{5}
}
func (m *GetLatestHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLatestHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLatestHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLatestHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLatestHeightResponse.Merge(m, src)
}
func (m *GetLatestHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetLatestHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLatestHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetLatestHeightResponse proto.InternalMessageInfo

func (m *GetLatestHeightResponse) GetHeight() *types1.Height {
	if m != nil {
		return m.Height
	}
	return nil
}

// rpc IsFrozen
type IsFrozenRequest struct {
	State *State `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *IsFrozenRequest) Reset()         { *m = IsFrozenRequest{} }
func (m *IsFrozenRequest) String() string { return proto.CompactTextString(m) }
func (*IsFrozenRequest) ProtoMessage()    {}
func (*IsFrozenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{6}
}
func (m *IsFrozenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsFrozenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsFrozenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsFrozenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsFrozenRequest.Merge(m, src)
}
func (m *IsFrozenRequest) XXX_Size() int {
	return m.Size()
}
func (m *IsFrozenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsFrozenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsFrozenRequest proto.InternalMessageInfo

func (m *IsFrozenRequest) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

type IsFrozenResponse struct {
	IsFrozen bool `protobuf:"varint,1,opt,name=is_frozen,json=isFrozen,proto3" json:"is_frozen,omitempty"`
}

func (m *IsFrozenResponse) Reset()         { *m = IsFrozenResponse{} }
func (m *IsFrozenResponse) String() string { return proto.CompactTextString(m) }
func (*IsFrozenResponse) ProtoMessage()    {}
func (*IsFrozenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{7}
}
func (m *IsFrozenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsFrozenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsFrozenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsFrozenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsFrozenResponse.Merge(m, src)
}
func (m *IsFrozenResponse) XXX_Size() int {
	return m.Size()
}
func (m *IsFrozenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IsFrozenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IsFrozenResponse proto.InternalMessageInfo

func (m *IsFrozenResponse) GetIsFrozen() bool {
	if m != nil {
		return m.IsFrozen
	}
	return false
}

// rpc GetFrozenHeight
type GetFrozenHeightRequest struct {
	State *State `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *GetFrozenHeightRequest) Reset()         { *m = GetFrozenHeightRequest{} }
func (m *GetFrozenHeightRequest) String() string { return proto.CompactTextString(m) }
func (*GetFrozenHeightRequest) ProtoMessage()    {}
func (*GetFrozenHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{8}
}
func (m *GetFrozenHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFrozenHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFrozenHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetFrozenHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFrozenHeightRequest.Merge(m, src)
}
func (m *GetFrozenHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetFrozenHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFrozenHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetFrozenHeightRequest proto.InternalMessageInfo

func (m *GetFrozenHeightRequest) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

type GetFrozenHeightResponse struct {
	Height *types1.Height `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *GetFrozenHeightResponse) Reset()         { *m = GetFrozenHeightResponse{} }
func (m *GetFrozenHeightResponse) String() string { return proto.CompactTextString(m) }
func (*GetFrozenHeightResponse) ProtoMessage()    {}
func (*GetFrozenHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{9}
}
func (m *GetFrozenHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFrozenHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFrozenHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetFrozenHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFrozenHeightResponse.Merge(m, src)
}
func (m *GetFrozenHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetFrozenHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFrozenHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetFrozenHeightResponse proto.InternalMessageInfo

func (m *GetFrozenHeightResponse) GetHeight() *types1.Height {
	if m != nil {
		return m.Height
	}
	return nil
}

// rpc Validate
type ValidateRequest struct {
	State *State `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *ValidateRequest) Reset()         { *m = ValidateRequest{} }
func (m *ValidateRequest) String() string { return proto.CompactTextString(m) }
func (*ValidateRequest) ProtoMessage()    {}
func (*ValidateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{10}
}
func (m *ValidateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateRequest.Merge(m, src)
}
func (m *ValidateRequest) XXX_Size() int {
	return m.Size()
}
func (m *ValidateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateRequest proto.InternalMessageInfo

func (m *ValidateRequest) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

type ValidateResponse struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ValidateResponse) Reset()         { *m = ValidateResponse{} }
func (m *ValidateResponse) String() string { return proto.CompactTextString(m) }
func (*ValidateResponse) ProtoMessage()    {}
func (*ValidateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{11}
}
func (m *ValidateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateResponse.Merge(m, src)
}
func (m *ValidateResponse) XXX_Size() int {
	return m.Size()
}
func (m *ValidateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateResponse proto.InternalMessageInfo

func (m *ValidateResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

// rpc GetProofSpecs
type GetProofSpecsRequest struct {
	State *State `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *GetProofSpecsRequest) Reset()         { *m = GetProofSpecsRequest{} }
func (m *GetProofSpecsRequest) String() string { return proto.CompactTextString(m) }
func (*GetProofSpecsRequest) ProtoMessage()    {}
func (*GetProofSpecsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{12}
}
func (m *GetProofSpecsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetProofSpecsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetProofSpecsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetProofSpecsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProofSpecsRequest.Merge(m, src)
}
func (m *GetProofSpecsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetProofSpecsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProofSpecsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetProofSpecsRequest proto.InternalMessageInfo

func (m *GetProofSpecsRequest) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

type GetProofSpecsResponse struct {
	ProofSpecs []*_go.ProofSpec `protobuf:"bytes,1,rep,name=proof_specs,json=proofSpecs,proto3" json:"proof_specs,omitempty"`
}

func (m *GetProofSpecsResponse) Reset()         { *m = GetProofSpecsResponse{} }
func (m *GetProofSpecsResponse) String() string { return proto.CompactTextString(m) }
func (*GetProofSpecsResponse) ProtoMessage()    {}
func (*GetProofSpecsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{13}
}
func (m *GetProofSpecsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetProofSpecsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetProofSpecsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetProofSpecsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProofSpecsResponse.Merge(m, src)
}
func (m *GetProofSpecsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetProofSpecsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProofSpecsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetProofSpecsResponse proto.InternalMessageInfo

func (m *GetProofSpecsResponse) GetProofSpecs() []*_go.ProofSpec {
	if m != nil {
		return m.ProofSpecs
	}
	return nil
}

// rpc CheckHeaderAndUpdateState
type CheckHeaderAndUpdateStateRequest struct {
	State  *State        `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Header *types.Header `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
}

func (m *CheckHeaderAndUpdateStateRequest) Reset()         { *m = CheckHeaderAndUpdateStateRequest{} }
func (m *CheckHeaderAndUpdateStateRequest) String() string { return proto.CompactTextString(m) }
func (*CheckHeaderAndUpdateStateRequest) ProtoMessage()    {}
func (*CheckHeaderAndUpdateStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{14}
}
func (m *CheckHeaderAndUpdateStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckHeaderAndUpdateStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckHeaderAndUpdateStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckHeaderAndUpdateStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckHeaderAndUpdateStateRequest.Merge(m, src)
}
func (m *CheckHeaderAndUpdateStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *CheckHeaderAndUpdateStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckHeaderAndUpdateStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckHeaderAndUpdateStateRequest proto.InternalMessageInfo

func (m *CheckHeaderAndUpdateStateRequest) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *CheckHeaderAndUpdateStateRequest) GetHeader() *types.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

type CheckHeaderAndUpdateStateResponse struct {
	State *State `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *CheckHeaderAndUpdateStateResponse) Reset()         { *m = CheckHeaderAndUpdateStateResponse{} }
func (m *CheckHeaderAndUpdateStateResponse) String() string { return proto.CompactTextString(m) }
func (*CheckHeaderAndUpdateStateResponse) ProtoMessage()    {}
func (*CheckHeaderAndUpdateStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{15}
}
func (m *CheckHeaderAndUpdateStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckHeaderAndUpdateStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckHeaderAndUpdateStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckHeaderAndUpdateStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckHeaderAndUpdateStateResponse.Merge(m, src)
}
func (m *CheckHeaderAndUpdateStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *CheckHeaderAndUpdateStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckHeaderAndUpdateStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckHeaderAndUpdateStateResponse proto.InternalMessageInfo

func (m *CheckHeaderAndUpdateStateResponse) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *CheckHeaderAndUpdateStateResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

// rpc CheckProposedHeaderAndUpdateState(header exported.Header) returns ((exported.ClientState, exported.ConsensusState, error))
type CheckProposedHeaderAndUpdateStateRequest struct {
	State  *State        `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Header *types.Header `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
}

func (m *CheckProposedHeaderAndUpdateStateRequest) Reset() {
	*m = CheckProposedHeaderAndUpdateStateRequest{}
}
func (m *CheckProposedHeaderAndUpdateStateRequest) String() string { return proto.CompactTextString(m) }
func (*CheckProposedHeaderAndUpdateStateRequest) ProtoMessage()    {}
func (*CheckProposedHeaderAndUpdateStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{16}
}
func (m *CheckProposedHeaderAndUpdateStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckProposedHeaderAndUpdateStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckProposedHeaderAndUpdateStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckProposedHeaderAndUpdateStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckProposedHeaderAndUpdateStateRequest.Merge(m, src)
}
func (m *CheckProposedHeaderAndUpdateStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *CheckProposedHeaderAndUpdateStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckProposedHeaderAndUpdateStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckProposedHeaderAndUpdateStateRequest proto.InternalMessageInfo

func (m *CheckProposedHeaderAndUpdateStateRequest) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *CheckProposedHeaderAndUpdateStateRequest) GetHeader() *types.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

type CheckProposedHeaderAndUpdateStateResponse struct {
	State *State `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *CheckProposedHeaderAndUpdateStateResponse) Reset() {
	*m = CheckProposedHeaderAndUpdateStateResponse{}
}
func (m *CheckProposedHeaderAndUpdateStateResponse) String() string {
	return proto.CompactTextString(m)
}
func (*CheckProposedHeaderAndUpdateStateResponse) ProtoMessage() {}
func (*CheckProposedHeaderAndUpdateStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{17}
}
func (m *CheckProposedHeaderAndUpdateStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckProposedHeaderAndUpdateStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckProposedHeaderAndUpdateStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckProposedHeaderAndUpdateStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckProposedHeaderAndUpdateStateResponse.Merge(m, src)
}
func (m *CheckProposedHeaderAndUpdateStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *CheckProposedHeaderAndUpdateStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckProposedHeaderAndUpdateStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckProposedHeaderAndUpdateStateResponse proto.InternalMessageInfo

func (m *CheckProposedHeaderAndUpdateStateResponse) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *CheckProposedHeaderAndUpdateStateResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

// rpc VerifyUpgrade
type VerifyUpgradeRequest struct {
	State         *State             `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	NewClient     *types.ClientState `protobuf:"bytes,2,opt,name=new_client,json=newClient,proto3" json:"new_client,omitempty"`
	UpgradeHeight *types1.Height     `protobuf:"bytes,3,opt,name=upgrade_height,json=upgradeHeight,proto3" json:"upgrade_height,omitempty"`
	ProofUpgrade  []byte             `protobuf:"bytes,4,opt,name=proof_upgrade,json=proofUpgrade,proto3" json:"proof_upgrade,omitempty"`
}

func (m *VerifyUpgradeRequest) Reset()         { *m = VerifyUpgradeRequest{} }
func (m *VerifyUpgradeRequest) String() string { return proto.CompactTextString(m) }
func (*VerifyUpgradeRequest) ProtoMessage()    {}
func (*VerifyUpgradeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{18}
}
func (m *VerifyUpgradeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyUpgradeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyUpgradeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyUpgradeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyUpgradeRequest.Merge(m, src)
}
func (m *VerifyUpgradeRequest) XXX_Size() int {
	return m.Size()
}
func (m *VerifyUpgradeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyUpgradeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyUpgradeRequest proto.InternalMessageInfo

func (m *VerifyUpgradeRequest) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *VerifyUpgradeRequest) GetNewClient() *types.ClientState {
	if m != nil {
		return m.NewClient
	}
	return nil
}

func (m *VerifyUpgradeRequest) GetUpgradeHeight() *types1.Height {
	if m != nil {
		return m.UpgradeHeight
	}
	return nil
}

func (m *VerifyUpgradeRequest) GetProofUpgrade() []byte {
	if m != nil {
		return m.ProofUpgrade
	}
	return nil
}

type VerifyUpgradeResponse struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *VerifyUpgradeResponse) Reset()         { *m = VerifyUpgradeResponse{} }
func (m *VerifyUpgradeResponse) String() string { return proto.CompactTextString(m) }
func (*VerifyUpgradeResponse) ProtoMessage()    {}
func (*VerifyUpgradeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{19}
}
func (m *VerifyUpgradeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyUpgradeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyUpgradeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyUpgradeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyUpgradeResponse.Merge(m, src)
}
func (m *VerifyUpgradeResponse) XXX_Size() int {
	return m.Size()
}
func (m *VerifyUpgradeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyUpgradeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyUpgradeResponse proto.InternalMessageInfo

func (m *VerifyUpgradeResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

// rpc ZeroCustomFields
type ZeroCustomFieldsRequest struct {
	State *State `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *ZeroCustomFieldsRequest) Reset()         { *m = ZeroCustomFieldsRequest{} }
func (m *ZeroCustomFieldsRequest) String() string { return proto.CompactTextString(m) }
func (*ZeroCustomFieldsRequest) ProtoMessage()    {}
func (*ZeroCustomFieldsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{20}
}
func (m *ZeroCustomFieldsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZeroCustomFieldsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ZeroCustomFieldsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ZeroCustomFieldsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZeroCustomFieldsRequest.Merge(m, src)
}
func (m *ZeroCustomFieldsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ZeroCustomFieldsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ZeroCustomFieldsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ZeroCustomFieldsRequest proto.InternalMessageInfo

func (m *ZeroCustomFieldsRequest) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

type ZeroCustomFieldsResponse struct {
	ClientState *types.ClientState `protobuf:"bytes,1,opt,name=client_state,json=clientState,proto3" json:"client_state,omitempty"`
}

func (m *ZeroCustomFieldsResponse) Reset()         { *m = ZeroCustomFieldsResponse{} }
func (m *ZeroCustomFieldsResponse) String() string { return proto.CompactTextString(m) }
func (*ZeroCustomFieldsResponse) ProtoMessage()    {}
func (*ZeroCustomFieldsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{21}
}
func (m *ZeroCustomFieldsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZeroCustomFieldsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ZeroCustomFieldsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ZeroCustomFieldsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZeroCustomFieldsResponse.Merge(m, src)
}
func (m *ZeroCustomFieldsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ZeroCustomFieldsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ZeroCustomFieldsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ZeroCustomFieldsResponse proto.InternalMessageInfo

func (m *ZeroCustomFieldsResponse) GetClientState() *types.ClientState {
	if m != nil {
		return m.ClientState
	}
	return nil
}

// rpc VerifyClientState
type VerifyClientStateRequest struct {
	State                        *State               `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Height                       *types1.Height       `protobuf:"bytes,2,opt,name=height,proto3" json:"height,omitempty"`
	Prefix                       *types2.MerklePrefix `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
	CounterpartyClientIdentifier string               `protobuf:"bytes,4,opt,name=counterparty_client_identifier,json=counterpartyClientIdentifier,proto3" json:"counterparty_client_identifier,omitempty"`
	Proof                        []byte               `protobuf:"bytes,5,opt,name=proof,proto3" json:"proof,omitempty"`
	ClientState                  *types.ClientState   `protobuf:"bytes,6,opt,name=client_state,json=clientState,proto3" json:"client_state,omitempty"`
}

func (m *VerifyClientStateRequest) Reset()         { *m = VerifyClientStateRequest{} }
func (m *VerifyClientStateRequest) String() string { return proto.CompactTextString(m) }
func (*VerifyClientStateRequest) ProtoMessage()    {}
func (*VerifyClientStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{22}
}
func (m *VerifyClientStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyClientStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyClientStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyClientStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyClientStateRequest.Merge(m, src)
}
func (m *VerifyClientStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *VerifyClientStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyClientStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyClientStateRequest proto.InternalMessageInfo

func (m *VerifyClientStateRequest) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *VerifyClientStateRequest) GetHeight() *types1.Height {
	if m != nil {
		return m.Height
	}
	return nil
}

func (m *VerifyClientStateRequest) GetPrefix() *types2.MerklePrefix {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *VerifyClientStateRequest) GetCounterpartyClientIdentifier() string {
	if m != nil {
		return m.CounterpartyClientIdentifier
	}
	return ""
}

func (m *VerifyClientStateRequest) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *VerifyClientStateRequest) GetClientState() *types.ClientState {
	if m != nil {
		return m.ClientState
	}
	return nil
}

type VerifyClientStateResponse struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *VerifyClientStateResponse) Reset()         { *m = VerifyClientStateResponse{} }
func (m *VerifyClientStateResponse) String() string { return proto.CompactTextString(m) }
func (*VerifyClientStateResponse) ProtoMessage()    {}
func (*VerifyClientStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{23}
}
func (m *VerifyClientStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyClientStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyClientStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyClientStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyClientStateResponse.Merge(m, src)
}
func (m *VerifyClientStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *VerifyClientStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyClientStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyClientStateResponse proto.InternalMessageInfo

func (m *VerifyClientStateResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

// rpc VerifyClientConsensusState
type VerifyClientConsensusStateRequest struct {
	State                        *State                `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Height                       *types1.Height        `protobuf:"bytes,2,opt,name=height,proto3" json:"height,omitempty"`
	CounterpartyClientIdentifier string                `protobuf:"bytes,3,opt,name=counterparty_client_identifier,json=counterpartyClientIdentifier,proto3" json:"counterparty_client_identifier,omitempty"`
	ConsensusHeight              *types1.Height        `protobuf:"bytes,4,opt,name=consensus_height,json=consensusHeight,proto3" json:"consensus_height,omitempty"`
	Prefix                       *types2.MerklePrefix  `protobuf:"bytes,5,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Proof                        []byte                `protobuf:"bytes,6,opt,name=proof,proto3" json:"proof,omitempty"`
	ConsensusState               *types.ConsensusState `protobuf:"bytes,7,opt,name=consensus_state,json=consensusState,proto3" json:"consensus_state,omitempty"`
}

func (m *VerifyClientConsensusStateRequest) Reset()         { *m = VerifyClientConsensusStateRequest{} }
func (m *VerifyClientConsensusStateRequest) String() string { return proto.CompactTextString(m) }
func (*VerifyClientConsensusStateRequest) ProtoMessage()    {}
func (*VerifyClientConsensusStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{24}
}
func (m *VerifyClientConsensusStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyClientConsensusStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyClientConsensusStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyClientConsensusStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyClientConsensusStateRequest.Merge(m, src)
}
func (m *VerifyClientConsensusStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *VerifyClientConsensusStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyClientConsensusStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyClientConsensusStateRequest proto.InternalMessageInfo

func (m *VerifyClientConsensusStateRequest) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *VerifyClientConsensusStateRequest) GetHeight() *types1.Height {
	if m != nil {
		return m.Height
	}
	return nil
}

func (m *VerifyClientConsensusStateRequest) GetCounterpartyClientIdentifier() string {
	if m != nil {
		return m.CounterpartyClientIdentifier
	}
	return ""
}

func (m *VerifyClientConsensusStateRequest) GetConsensusHeight() *types1.Height {
	if m != nil {
		return m.ConsensusHeight
	}
	return nil
}

func (m *VerifyClientConsensusStateRequest) GetPrefix() *types2.MerklePrefix {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *VerifyClientConsensusStateRequest) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *VerifyClientConsensusStateRequest) GetConsensusState() *types.ConsensusState {
	if m != nil {
		return m.ConsensusState
	}
	return nil
}

type VerifyClientConsensusStateResponse struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *VerifyClientConsensusStateResponse) Reset()         { *m = VerifyClientConsensusStateResponse{} }
func (m *VerifyClientConsensusStateResponse) String() string { return proto.CompactTextString(m) }
func (*VerifyClientConsensusStateResponse) ProtoMessage()    {}
func (*VerifyClientConsensusStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{25}
}
func (m *VerifyClientConsensusStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyClientConsensusStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyClientConsensusStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyClientConsensusStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyClientConsensusStateResponse.Merge(m, src)
}
func (m *VerifyClientConsensusStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *VerifyClientConsensusStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyClientConsensusStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyClientConsensusStateResponse proto.InternalMessageInfo

func (m *VerifyClientConsensusStateResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

// rpc VerifyConnectionState
type VerifyConnectionStateRequest struct {
	State         *State                `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Height        *types1.Height        `protobuf:"bytes,2,opt,name=height,proto3" json:"height,omitempty"`
	Prefix        *types2.MerklePrefix  `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Proof         []byte                `protobuf:"bytes,4,opt,name=proof,proto3" json:"proof,omitempty"`
	ConnectionId  string                `protobuf:"bytes,5,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	ConnectionEnd *types3.ConnectionEnd `protobuf:"bytes,6,opt,name=connection_end,json=connectionEnd,proto3" json:"connection_end,omitempty"`
}

func (m *VerifyConnectionStateRequest) Reset()         { *m = VerifyConnectionStateRequest{} }
func (m *VerifyConnectionStateRequest) String() string { return proto.CompactTextString(m) }
func (*VerifyConnectionStateRequest) ProtoMessage()    {}
func (*VerifyConnectionStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{26}
}
func (m *VerifyConnectionStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyConnectionStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyConnectionStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyConnectionStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyConnectionStateRequest.Merge(m, src)
}
func (m *VerifyConnectionStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *VerifyConnectionStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyConnectionStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyConnectionStateRequest proto.InternalMessageInfo

func (m *VerifyConnectionStateRequest) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *VerifyConnectionStateRequest) GetHeight() *types1.Height {
	if m != nil {
		return m.Height
	}
	return nil
}

func (m *VerifyConnectionStateRequest) GetPrefix() *types2.MerklePrefix {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *VerifyConnectionStateRequest) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *VerifyConnectionStateRequest) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

func (m *VerifyConnectionStateRequest) GetConnectionEnd() *types3.ConnectionEnd {
	if m != nil {
		return m.ConnectionEnd
	}
	return nil
}

type VerifyConnectionStateResponse struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *VerifyConnectionStateResponse) Reset()         { *m = VerifyConnectionStateResponse{} }
func (m *VerifyConnectionStateResponse) String() string { return proto.CompactTextString(m) }
func (*VerifyConnectionStateResponse) ProtoMessage()    {}
func (*VerifyConnectionStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{27}
}
func (m *VerifyConnectionStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyConnectionStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyConnectionStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyConnectionStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyConnectionStateResponse.Merge(m, src)
}
func (m *VerifyConnectionStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *VerifyConnectionStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyConnectionStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyConnectionStateResponse proto.InternalMessageInfo

func (m *VerifyConnectionStateResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

// rpc VerifyChannelState
type VerifyChannelStateRequest struct {
	State     *State               `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Height    *types1.Height       `protobuf:"bytes,2,opt,name=height,proto3" json:"height,omitempty"`
	Prefix    *types2.MerklePrefix `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Proof     []byte               `protobuf:"bytes,4,opt,name=proof,proto3" json:"proof,omitempty"`
	PortId    string               `protobuf:"bytes,5,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	ChannelId string               `protobuf:"bytes,6,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Channel   *types4.Channel      `protobuf:"bytes,7,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (m *VerifyChannelStateRequest) Reset()         { *m = VerifyChannelStateRequest{} }
func (m *VerifyChannelStateRequest) String() string { return proto.CompactTextString(m) }
func (*VerifyChannelStateRequest) ProtoMessage()    {}
func (*VerifyChannelStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{28}
}
func (m *VerifyChannelStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyChannelStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyChannelStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyChannelStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyChannelStateRequest.Merge(m, src)
}
func (m *VerifyChannelStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *VerifyChannelStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyChannelStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyChannelStateRequest proto.InternalMessageInfo

func (m *VerifyChannelStateRequest) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *VerifyChannelStateRequest) GetHeight() *types1.Height {
	if m != nil {
		return m.Height
	}
	return nil
}

func (m *VerifyChannelStateRequest) GetPrefix() *types2.MerklePrefix {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *VerifyChannelStateRequest) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *VerifyChannelStateRequest) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

func (m *VerifyChannelStateRequest) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *VerifyChannelStateRequest) GetChannel() *types4.Channel {
	if m != nil {
		return m.Channel
	}
	return nil
}

type VerifyChannelStateResponse struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *VerifyChannelStateResponse) Reset()         { *m = VerifyChannelStateResponse{} }
func (m *VerifyChannelStateResponse) String() string { return proto.CompactTextString(m) }
func (*VerifyChannelStateResponse) ProtoMessage()    {}
func (*VerifyChannelStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{29}
}
func (m *VerifyChannelStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyChannelStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyChannelStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyChannelStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyChannelStateResponse.Merge(m, src)
}
func (m *VerifyChannelStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *VerifyChannelStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyChannelStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyChannelStateResponse proto.InternalMessageInfo

func (m *VerifyChannelStateResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

// rpc VerifyPacketCommitment
type VerifyPacketCommitmentRequest struct {
	State           *State               `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Height          *types1.Height       `protobuf:"bytes,2,opt,name=height,proto3" json:"height,omitempty"`
	Prefix          *types2.MerklePrefix `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Proof           []byte               `protobuf:"bytes,4,opt,name=proof,proto3" json:"proof,omitempty"`
	PortId          string               `protobuf:"bytes,5,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	ChannelId       string               `protobuf:"bytes,6,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Sequence        uint64               `protobuf:"varint,7,opt,name=sequence,proto3" json:"sequence,omitempty"`
	CommitmentBytes []byte               `protobuf:"bytes,8,opt,name=commitment_bytes,json=commitmentBytes,proto3" json:"commitment_bytes,omitempty"`
}

func (m *VerifyPacketCommitmentRequest) Reset()         { *m = VerifyPacketCommitmentRequest{} }
func (m *VerifyPacketCommitmentRequest) String() string { return proto.CompactTextString(m) }
func (*VerifyPacketCommitmentRequest) ProtoMessage()    {}
func (*VerifyPacketCommitmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{30}
}
func (m *VerifyPacketCommitmentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyPacketCommitmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyPacketCommitmentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyPacketCommitmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyPacketCommitmentRequest.Merge(m, src)
}
func (m *VerifyPacketCommitmentRequest) XXX_Size() int {
	return m.Size()
}
func (m *VerifyPacketCommitmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyPacketCommitmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyPacketCommitmentRequest proto.InternalMessageInfo

func (m *VerifyPacketCommitmentRequest) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *VerifyPacketCommitmentRequest) GetHeight() *types1.Height {
	if m != nil {
		return m.Height
	}
	return nil
}

func (m *VerifyPacketCommitmentRequest) GetPrefix() *types2.MerklePrefix {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *VerifyPacketCommitmentRequest) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *VerifyPacketCommitmentRequest) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

func (m *VerifyPacketCommitmentRequest) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *VerifyPacketCommitmentRequest) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *VerifyPacketCommitmentRequest) GetCommitmentBytes() []byte {
	if m != nil {
		return m.CommitmentBytes
	}
	return nil
}

type VerifyPacketCommitmentResponse struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *VerifyPacketCommitmentResponse) Reset()         { *m = VerifyPacketCommitmentResponse{} }
func (m *VerifyPacketCommitmentResponse) String() string { return proto.CompactTextString(m) }
func (*VerifyPacketCommitmentResponse) ProtoMessage()    {}
func (*VerifyPacketCommitmentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{31}
}
func (m *VerifyPacketCommitmentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyPacketCommitmentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyPacketCommitmentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyPacketCommitmentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyPacketCommitmentResponse.Merge(m, src)
}
func (m *VerifyPacketCommitmentResponse) XXX_Size() int {
	return m.Size()
}
func (m *VerifyPacketCommitmentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyPacketCommitmentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyPacketCommitmentResponse proto.InternalMessageInfo

func (m *VerifyPacketCommitmentResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

// rpc VerifyPacketAcknowledgement
type VerifyPacketAcknowledgementRequest struct {
	State           *State               `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Height          *types1.Height       `protobuf:"bytes,2,opt,name=height,proto3" json:"height,omitempty"`
	Prefix          *types2.MerklePrefix `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Proof           []byte               `protobuf:"bytes,4,opt,name=proof,proto3" json:"proof,omitempty"`
	PortId          string               `protobuf:"bytes,5,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	ChannelId       string               `protobuf:"bytes,6,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Sequence        uint64               `protobuf:"varint,7,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Acknowledgement []byte               `protobuf:"bytes,8,opt,name=acknowledgement,proto3" json:"acknowledgement,omitempty"`
}

func (m *VerifyPacketAcknowledgementRequest) Reset()         { *m = VerifyPacketAcknowledgementRequest{} }
func (m *VerifyPacketAcknowledgementRequest) String() string { return proto.CompactTextString(m) }
func (*VerifyPacketAcknowledgementRequest) ProtoMessage()    {}
func (*VerifyPacketAcknowledgementRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{32}
}
func (m *VerifyPacketAcknowledgementRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyPacketAcknowledgementRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyPacketAcknowledgementRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyPacketAcknowledgementRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyPacketAcknowledgementRequest.Merge(m, src)
}
func (m *VerifyPacketAcknowledgementRequest) XXX_Size() int {
	return m.Size()
}
func (m *VerifyPacketAcknowledgementRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyPacketAcknowledgementRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyPacketAcknowledgementRequest proto.InternalMessageInfo

func (m *VerifyPacketAcknowledgementRequest) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *VerifyPacketAcknowledgementRequest) GetHeight() *types1.Height {
	if m != nil {
		return m.Height
	}
	return nil
}

func (m *VerifyPacketAcknowledgementRequest) GetPrefix() *types2.MerklePrefix {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *VerifyPacketAcknowledgementRequest) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *VerifyPacketAcknowledgementRequest) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

func (m *VerifyPacketAcknowledgementRequest) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *VerifyPacketAcknowledgementRequest) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *VerifyPacketAcknowledgementRequest) GetAcknowledgement() []byte {
	if m != nil {
		return m.Acknowledgement
	}
	return nil
}

type VerifyPacketAcknowledgementResponse struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *VerifyPacketAcknowledgementResponse) Reset()         { *m = VerifyPacketAcknowledgementResponse{} }
func (m *VerifyPacketAcknowledgementResponse) String() string { return proto.CompactTextString(m) }
func (*VerifyPacketAcknowledgementResponse) ProtoMessage()    {}
func (*VerifyPacketAcknowledgementResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{33}
}
func (m *VerifyPacketAcknowledgementResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyPacketAcknowledgementResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyPacketAcknowledgementResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyPacketAcknowledgementResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyPacketAcknowledgementResponse.Merge(m, src)
}
func (m *VerifyPacketAcknowledgementResponse) XXX_Size() int {
	return m.Size()
}
func (m *VerifyPacketAcknowledgementResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyPacketAcknowledgementResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyPacketAcknowledgementResponse proto.InternalMessageInfo

func (m *VerifyPacketAcknowledgementResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

// rpc VerifyPacketReceiptAbsence
type VerifyPacketReceiptAbsenceRequest struct {
	State     *State               `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Height    *types1.Height       `protobuf:"bytes,2,opt,name=height,proto3" json:"height,omitempty"`
	Prefix    *types2.MerklePrefix `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Proof     []byte               `protobuf:"bytes,4,opt,name=proof,proto3" json:"proof,omitempty"`
	PortId    string               `protobuf:"bytes,5,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	ChannelId string               `protobuf:"bytes,6,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Sequence  uint64               `protobuf:"varint,7,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (m *VerifyPacketReceiptAbsenceRequest) Reset()         { *m = VerifyPacketReceiptAbsenceRequest{} }
func (m *VerifyPacketReceiptAbsenceRequest) String() string { return proto.CompactTextString(m) }
func (*VerifyPacketReceiptAbsenceRequest) ProtoMessage()    {}
func (*VerifyPacketReceiptAbsenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{34}
}
func (m *VerifyPacketReceiptAbsenceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyPacketReceiptAbsenceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyPacketReceiptAbsenceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyPacketReceiptAbsenceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyPacketReceiptAbsenceRequest.Merge(m, src)
}
func (m *VerifyPacketReceiptAbsenceRequest) XXX_Size() int {
	return m.Size()
}
func (m *VerifyPacketReceiptAbsenceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyPacketReceiptAbsenceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyPacketReceiptAbsenceRequest proto.InternalMessageInfo

func (m *VerifyPacketReceiptAbsenceRequest) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *VerifyPacketReceiptAbsenceRequest) GetHeight() *types1.Height {
	if m != nil {
		return m.Height
	}
	return nil
}

func (m *VerifyPacketReceiptAbsenceRequest) GetPrefix() *types2.MerklePrefix {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *VerifyPacketReceiptAbsenceRequest) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *VerifyPacketReceiptAbsenceRequest) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

func (m *VerifyPacketReceiptAbsenceRequest) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *VerifyPacketReceiptAbsenceRequest) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

type VerifyPacketReceiptAbsenceResponse struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *VerifyPacketReceiptAbsenceResponse) Reset()         { *m = VerifyPacketReceiptAbsenceResponse{} }
func (m *VerifyPacketReceiptAbsenceResponse) String() string { return proto.CompactTextString(m) }
func (*VerifyPacketReceiptAbsenceResponse) ProtoMessage()    {}
func (*VerifyPacketReceiptAbsenceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{35}
}
func (m *VerifyPacketReceiptAbsenceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyPacketReceiptAbsenceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyPacketReceiptAbsenceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyPacketReceiptAbsenceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyPacketReceiptAbsenceResponse.Merge(m, src)
}
func (m *VerifyPacketReceiptAbsenceResponse) XXX_Size() int {
	return m.Size()
}
func (m *VerifyPacketReceiptAbsenceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyPacketReceiptAbsenceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyPacketReceiptAbsenceResponse proto.InternalMessageInfo

func (m *VerifyPacketReceiptAbsenceResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

// rpc VerifyNextSequenceRecv
type VerifyNextSequenceRecvRequest struct {
	State            *State               `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Height           *types1.Height       `protobuf:"bytes,2,opt,name=height,proto3" json:"height,omitempty"`
	Prefix           *types2.MerklePrefix `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Proof            []byte               `protobuf:"bytes,4,opt,name=proof,proto3" json:"proof,omitempty"`
	PortId           string               `protobuf:"bytes,5,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	ChannelId        string               `protobuf:"bytes,6,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	NextSequenceRecv uint64               `protobuf:"varint,7,opt,name=next_sequence_recv,json=nextSequenceRecv,proto3" json:"next_sequence_recv,omitempty"`
}

func (m *VerifyNextSequenceRecvRequest) Reset()         { *m = VerifyNextSequenceRecvRequest{} }
func (m *VerifyNextSequenceRecvRequest) String() string { return proto.CompactTextString(m) }
func (*VerifyNextSequenceRecvRequest) ProtoMessage()    {}
func (*VerifyNextSequenceRecvRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{36}
}
func (m *VerifyNextSequenceRecvRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyNextSequenceRecvRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyNextSequenceRecvRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyNextSequenceRecvRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyNextSequenceRecvRequest.Merge(m, src)
}
func (m *VerifyNextSequenceRecvRequest) XXX_Size() int {
	return m.Size()
}
func (m *VerifyNextSequenceRecvRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyNextSequenceRecvRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyNextSequenceRecvRequest proto.InternalMessageInfo

func (m *VerifyNextSequenceRecvRequest) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *VerifyNextSequenceRecvRequest) GetHeight() *types1.Height {
	if m != nil {
		return m.Height
	}
	return nil
}

func (m *VerifyNextSequenceRecvRequest) GetPrefix() *types2.MerklePrefix {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *VerifyNextSequenceRecvRequest) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *VerifyNextSequenceRecvRequest) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

func (m *VerifyNextSequenceRecvRequest) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *VerifyNextSequenceRecvRequest) GetNextSequenceRecv() uint64 {
	if m != nil {
		return m.NextSequenceRecv
	}
	return 0
}

type VerifyNextSequenceRecvResponse struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *VerifyNextSequenceRecvResponse) Reset()         { *m = VerifyNextSequenceRecvResponse{} }
func (m *VerifyNextSequenceRecvResponse) String() string { return proto.CompactTextString(m) }
func (*VerifyNextSequenceRecvResponse) ProtoMessage()    {}
func (*VerifyNextSequenceRecvResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{37}
}
func (m *VerifyNextSequenceRecvResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyNextSequenceRecvResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyNextSequenceRecvResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyNextSequenceRecvResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyNextSequenceRecvResponse.Merge(m, src)
}
func (m *VerifyNextSequenceRecvResponse) XXX_Size() int {
	return m.Size()
}
func (m *VerifyNextSequenceRecvResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyNextSequenceRecvResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyNextSequenceRecvResponse proto.InternalMessageInfo

func (m *VerifyNextSequenceRecvResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func init() {
	proto.RegisterType((*State)(nil), "ibc.lightclientd.fabric.v1.State")
	proto.RegisterMapType((map[uint64]*types.ConsensusState)(nil), "ibc.lightclientd.fabric.v1.State.ConsensusStatesEntry")
	proto.RegisterType((*Error)(nil), "ibc.lightclientd.fabric.v1.Error")
	proto.RegisterType((*ClientTypeRequest)(nil), "ibc.lightclientd.fabric.v1.ClientTypeRequest")
	proto.RegisterType((*ClientTypeResponse)(nil), "ibc.lightclientd.fabric.v1.ClientTypeResponse")
	proto.RegisterType((*GetLatestHeightRequest)(nil), "ibc.lightclientd.fabric.v1.GetLatestHeightRequest")
	proto.RegisterType((*GetLatestHeightResponse)(nil), "ibc.lightclientd.fabric.v1.GetLatestHeightResponse")
	proto.RegisterType((*IsFrozenRequest)(nil), "ibc.lightclientd.fabric.v1.IsFrozenRequest")
	proto.RegisterType((*IsFrozenResponse)(nil), "ibc.lightclientd.fabric.v1.IsFrozenResponse")
	proto.RegisterType((*GetFrozenHeightRequest)(nil), "ibc.lightclientd.fabric.v1.GetFrozenHeightRequest")
	proto.RegisterType((*GetFrozenHeightResponse)(nil), "ibc.lightclientd.fabric.v1.GetFrozenHeightResponse")
	proto.RegisterType((*ValidateRequest)(nil), "ibc.lightclientd.fabric.v1.ValidateRequest")
	proto.RegisterType((*ValidateResponse)(nil), "ibc.lightclientd.fabric.v1.ValidateResponse")
	proto.RegisterType((*GetProofSpecsRequest)(nil), "ibc.lightclientd.fabric.v1.GetProofSpecsRequest")
	proto.RegisterType((*GetProofSpecsResponse)(nil), "ibc.lightclientd.fabric.v1.GetProofSpecsResponse")
	proto.RegisterType((*CheckHeaderAndUpdateStateRequest)(nil), "ibc.lightclientd.fabric.v1.CheckHeaderAndUpdateStateRequest")
	proto.RegisterType((*CheckHeaderAndUpdateStateResponse)(nil), "ibc.lightclientd.fabric.v1.CheckHeaderAndUpdateStateResponse")
	proto.RegisterType((*CheckProposedHeaderAndUpdateStateRequest)(nil), "ibc.lightclientd.fabric.v1.CheckProposedHeaderAndUpdateStateRequest")
	proto.RegisterType((*CheckProposedHeaderAndUpdateStateResponse)(nil), "ibc.lightclientd.fabric.v1.CheckProposedHeaderAndUpdateStateResponse")
	proto.RegisterType((*VerifyUpgradeRequest)(nil), "ibc.lightclientd.fabric.v1.VerifyUpgradeRequest")
	proto.RegisterType((*VerifyUpgradeResponse)(nil), "ibc.lightclientd.fabric.v1.VerifyUpgradeResponse")
	proto.RegisterType((*ZeroCustomFieldsRequest)(nil), "ibc.lightclientd.fabric.v1.ZeroCustomFieldsRequest")
	proto.RegisterType((*ZeroCustomFieldsResponse)(nil), "ibc.lightclientd.fabric.v1.ZeroCustomFieldsResponse")
	proto.RegisterType((*VerifyClientStateRequest)(nil), "ibc.lightclientd.fabric.v1.VerifyClientStateRequest")
	proto.RegisterType((*VerifyClientStateResponse)(nil), "ibc.lightclientd.fabric.v1.VerifyClientStateResponse")
	proto.RegisterType((*VerifyClientConsensusStateRequest)(nil), "ibc.lightclientd.fabric.v1.VerifyClientConsensusStateRequest")
	proto.RegisterType((*VerifyClientConsensusStateResponse)(nil), "ibc.lightclientd.fabric.v1.VerifyClientConsensusStateResponse")
	proto.RegisterType((*VerifyConnectionStateRequest)(nil), "ibc.lightclientd.fabric.v1.VerifyConnectionStateRequest")
	proto.RegisterType((*VerifyConnectionStateResponse)(nil), "ibc.lightclientd.fabric.v1.VerifyConnectionStateResponse")
	proto.RegisterType((*VerifyChannelStateRequest)(nil), "ibc.lightclientd.fabric.v1.VerifyChannelStateRequest")
	proto.RegisterType((*VerifyChannelStateResponse)(nil), "ibc.lightclientd.fabric.v1.VerifyChannelStateResponse")
	proto.RegisterType((*VerifyPacketCommitmentRequest)(nil), "ibc.lightclientd.fabric.v1.VerifyPacketCommitmentRequest")
	proto.RegisterType((*VerifyPacketCommitmentResponse)(nil), "ibc.lightclientd.fabric.v1.VerifyPacketCommitmentResponse")
	proto.RegisterType((*VerifyPacketAcknowledgementRequest)(nil), "ibc.lightclientd.fabric.v1.VerifyPacketAcknowledgementRequest")
	proto.RegisterType((*VerifyPacketAcknowledgementResponse)(nil), "ibc.lightclientd.fabric.v1.VerifyPacketAcknowledgementResponse")
	proto.RegisterType((*VerifyPacketReceiptAbsenceRequest)(nil), "ibc.lightclientd.fabric.v1.VerifyPacketReceiptAbsenceRequest")
	proto.RegisterType((*VerifyPacketReceiptAbsenceResponse)(nil), "ibc.lightclientd.fabric.v1.VerifyPacketReceiptAbsenceResponse")
	proto.RegisterType((*VerifyNextSequenceRecvRequest)(nil), "ibc.lightclientd.fabric.v1.VerifyNextSequenceRecvRequest")
	proto.RegisterType((*VerifyNextSequenceRecvResponse)(nil), "ibc.lightclientd.fabric.v1.VerifyNextSequenceRecvResponse")
}

func init() {
	proto.RegisterFile("ibc/lightclientd/fabric/v1/fabric.proto", fileDescriptor_6967e85c342bf417)
}

var fileDescriptor_6967e85c342bf417 = []byte{
	// 1608 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5a, 0xdf, 0x6f, 0xd4, 0xc6,
	0x16, 0xc6, 0x9b, 0xec, 0x92, 0x9c, 0x24, 0x64, 0x99, 0x1b, 0x60, 0x31, 0xb0, 0x24, 0xe6, 0x5e,
	0x11, 0xee, 0x05, 0xe7, 0x26, 0xfc, 0x2c, 0x02, 0xda, 0x10, 0x02, 0x84, 0x86, 0x92, 0x3a, 0x80,
	0x5a, 0xa4, 0x76, 0xe5, 0xb5, 0x67, 0x13, 0x2b, 0x1b, 0xdb, 0xb5, 0x67, 0x17, 0x16, 0xa9, 0x52,
	0xa5, 0xbe, 0x56, 0x6a, 0x55, 0xa9, 0x6a, 0xa5, 0xaa, 0xed, 0x5b, 0x9f, 0xfb, 0xd8, 0xbf, 0xa0,
	0xea, 0x43, 0x1f, 0x50, 0x9f, 0xfa, 0xd6, 0x8a, 0x3c, 0xf7, 0x6f, 0x68, 0x65, 0xcf, 0xf8, 0xc7,
	0x7a, 0xbd, 0x5e, 0xef, 0x1a, 0x89, 0xb6, 0xf0, 0xe6, 0x19, 0x9f, 0x73, 0xe6, 0x9b, 0xf3, 0x1d,
	0xcf, 0x9e, 0xf9, 0xb4, 0x70, 0x5c, 0xab, 0x2a, 0x73, 0x75, 0x6d, 0x63, 0x93, 0x28, 0x75, 0x0d,
	0xeb, 0x44, 0x9d, 0xab, 0xc9, 0x55, 0x4b, 0x53, 0xe6, 0x9a, 0xf3, 0xec, 0x49, 0x34, 0x2d, 0x83,
	0x18, 0x88, 0xd7, 0xaa, 0x8a, 0x18, 0x36, 0x14, 0xd9, 0xeb, 0xe6, 0x3c, 0x7f, 0xd4, 0x09, 0xa2,
	0x18, 0x16, 0x9e, 0xa3, 0xef, 0x1c, 0x67, 0xfa, 0x44, 0x9d, 0xf9, 0xe3, 0x81, 0x81, 0xa1, 0xeb,
	0x58, 0x21, 0x9a, 0xa1, 0xbb, 0x46, 0xfe, 0x88, 0x19, 0xce, 0x04, 0x86, 0x9b, 0xb2, 0xae, 0xe3,
	0xba, 0x6b, 0x45, 0x1f, 0x63, 0x62, 0x6d, 0x6f, 0x6b, 0x64, 0xdb, 0x5b, 0xd0, 0x1f, 0x85, 0x0d,
	0x43, 0x88, 0xed, 0x2e, 0x5b, 0xe3, 0xc7, 0x4d, 0xcb, 0x30, 0x6a, 0x36, 0x1d, 0x09, 0xdf, 0xe6,
	0x20, 0xbf, 0x4e, 0x64, 0x82, 0xd1, 0x2d, 0x18, 0xa7, 0x9e, 0x15, 0xdb, 0x19, 0x97, 0xb8, 0x69,
	0x6e, 0x76, 0x6c, 0xe1, 0xb8, 0x18, 0xc9, 0x84, 0x1d, 0x64, 0x42, 0x5c, 0x72, 0x67, 0x5c, 0x77,
	0x69, 0x4c, 0x09, 0x06, 0x48, 0x86, 0xa2, 0x62, 0xe8, 0x36, 0xd6, 0xed, 0x86, 0x4d, 0xc3, 0xd9,
	0xa5, 0xdc, 0xf4, 0xd0, 0xec, 0xd8, 0xc2, 0x39, 0xb1, 0x7b, 0x66, 0x45, 0xd7, 0x59, 0x5c, 0xf2,
	0x3c, 0xdd, 0xa1, 0xbd, 0xac, 0x13, 0xab, 0x25, 0x4d, 0x2a, 0xed, 0xb3, 0xbc, 0x0e, 0x53, 0x71,
	0x86, 0xa8, 0x08, 0x43, 0x5b, 0xb8, 0xe5, 0xa2, 0x1f, 0x96, 0x9c, 0x47, 0xf4, 0x1a, 0xe4, 0x9b,
	0x72, 0xbd, 0x81, 0x4b, 0x39, 0x77, 0x47, 0xff, 0x4d, 0xdc, 0x51, 0x5b, 0x48, 0x89, 0x3a, 0x5e,
	0xcc, 0x5d, 0xe0, 0x84, 0x23, 0x90, 0x5f, 0xb6, 0x2c, 0xc3, 0x42, 0x53, 0x90, 0xc7, 0xce, 0x83,
	0xbb, 0xc4, 0xa8, 0x44, 0x07, 0xc2, 0x2a, 0xec, 0xa5, 0xd9, 0xb8, 0xdb, 0x32, 0xb1, 0x84, 0xdf,
	0x6b, 0x60, 0x9b, 0xa0, 0xf3, 0x90, 0x0f, 0xe7, 0x72, 0xa6, 0xe7, 0xde, 0x25, 0x6a, 0x2f, 0x9c,
	0x05, 0x14, 0x8e, 0x66, 0x9b, 0x0e, 0x2c, 0x74, 0x14, 0x58, 0x92, 0x2b, 0xa4, 0x65, 0x62, 0xb6,
	0x3e, 0x28, 0xbe, 0xa1, 0xf0, 0x26, 0xec, 0xbf, 0x81, 0xc9, 0xaa, 0x93, 0x0c, 0x72, 0x13, 0x3b,
	0xeb, 0x64, 0x46, 0x72, 0x1b, 0x0e, 0x74, 0x84, 0x64, 0x70, 0x16, 0xa0, 0xb0, 0xe9, 0xce, 0xb0,
	0xa0, 0xbc, 0x1b, 0xd4, 0xa9, 0x55, 0x91, 0x7d, 0x0e, 0xcd, 0x79, 0x91, 0xf9, 0x30, 0x4b, 0xe1,
	0x16, 0x4c, 0xae, 0xd8, 0xd7, 0x2d, 0xe3, 0x31, 0xd6, 0x33, 0x43, 0x9b, 0x83, 0x62, 0x10, 0x8b,
	0x61, 0x3a, 0x04, 0xa3, 0x9a, 0x5d, 0xa9, 0xb9, 0x93, 0x6e, 0xc0, 0x11, 0x69, 0x44, 0x63, 0x46,
	0x2c, 0x3d, 0x74, 0xf0, 0x4c, 0xd3, 0xd3, 0x1e, 0x32, 0x5b, 0x7a, 0xee, 0xcb, 0x75, 0x4d, 0x75,
	0x56, 0xc8, 0x0a, 0xed, 0x75, 0x28, 0x06, 0xb1, 0x18, 0xa6, 0xf3, 0xe1, 0xda, 0xed, 0x11, 0xcc,
	0xad, 0x76, 0xaf, 0xbc, 0xef, 0xc0, 0xd4, 0x0d, 0x4c, 0xd6, 0x9c, 0x93, 0x63, 0xdd, 0xc4, 0x8a,
	0x9d, 0x19, 0xdd, 0x2d, 0xd8, 0x17, 0x09, 0xc8, 0x20, 0xce, 0xc3, 0x98, 0x7b, 0x40, 0x55, 0x6c,
	0x67, 0xba, 0xc4, 0xb9, 0xa7, 0x46, 0x51, 0xd4, 0x14, 0x7b, 0xe1, 0xb4, 0xe8, 0xdb, 0x4b, 0x60,
	0xfa, 0xae, 0xc2, 0xe7, 0x1c, 0x4c, 0x2f, 0x6d, 0x62, 0x65, 0xeb, 0x26, 0x96, 0x55, 0x6c, 0x2d,
	0xea, 0xea, 0x3d, 0xd3, 0xd9, 0x36, 0x5d, 0x30, 0x23, 0x52, 0x74, 0xd1, 0xe1, 0xd1, 0x89, 0xcb,
	0xce, 0x0f, 0x21, 0xe9, 0xfc, 0xa0, 0x08, 0x24, 0xe6, 0x21, 0x7c, 0xc6, 0xc1, 0x4c, 0x02, 0xb2,
	0x80, 0x95, 0xc1, 0xa0, 0xf9, 0x74, 0xe6, 0xfa, 0xa4, 0xf3, 0x1b, 0x0e, 0x66, 0x5d, 0x5c, 0x6b,
	0x96, 0x61, 0x1a, 0x36, 0x56, 0xff, 0x72, 0x99, 0xfb, 0x8a, 0x83, 0x13, 0x29, 0x10, 0x3e, 0xb7,
	0x0c, 0xfe, 0xc1, 0xc1, 0xd4, 0x7d, 0x6c, 0x69, 0xb5, 0xd6, 0x3d, 0x73, 0xc3, 0x92, 0xd5, 0xec,
	0xd9, 0xba, 0x0e, 0xa0, 0xe3, 0x87, 0x15, 0x6a, 0xc5, 0xf0, 0xa4, 0xfe, 0xf5, 0x1d, 0xd5, 0xf1,
	0x43, 0x3a, 0x46, 0x8b, 0xb0, 0xa7, 0x41, 0x21, 0x55, 0xd8, 0xf9, 0x33, 0xd4, 0xf3, 0xfc, 0x99,
	0x60, 0x1e, 0x74, 0x88, 0x8e, 0xc1, 0x04, 0xfd, 0x06, 0xd9, 0x74, 0x69, 0x78, 0x9a, 0x9b, 0x1d,
	0x97, 0x68, 0xe7, 0xc0, 0xf6, 0x2b, 0xac, 0xc1, 0xbe, 0x48, 0x02, 0xb2, 0x1e, 0x32, 0x12, 0x1c,
	0x78, 0x80, 0x2d, 0x63, 0xa9, 0x61, 0x13, 0x63, 0xfb, 0xba, 0x86, 0xeb, 0x6a, 0xf6, 0x73, 0xa6,
	0x06, 0xa5, 0xce, 0x98, 0x0c, 0xe8, 0x33, 0xec, 0x78, 0x84, 0xdf, 0x73, 0x50, 0xa2, 0xe9, 0x08,
	0x9b, 0x64, 0xad, 0x89, 0xe0, 0x37, 0x24, 0x97, 0xf6, 0x37, 0x04, 0x5d, 0x82, 0x82, 0x69, 0xe1,
	0x9a, 0xf6, 0x88, 0xf1, 0xfe, 0xef, 0x90, 0x4f, 0xd0, 0x34, 0x36, 0xe7, 0xc5, 0xdb, 0xd8, 0xda,
	0xaa, 0xe3, 0x35, 0xd7, 0x56, 0x62, 0x3e, 0xe8, 0x1a, 0x94, 0x15, 0xa3, 0xa1, 0x13, 0x6c, 0x99,
	0xb2, 0x45, 0x5a, 0xac, 0x1c, 0x2b, 0x9a, 0x8a, 0x75, 0xa2, 0xd5, 0x34, 0x6c, 0xb9, 0xb5, 0x30,
	0x2a, 0x1d, 0x0e, 0x5b, 0xd1, 0x2d, 0xaf, 0xf8, 0x36, 0x4e, 0x8f, 0xe4, 0xd6, 0x4a, 0x29, 0xef,
	0x16, 0x0e, 0x1d, 0x74, 0xe4, 0xbb, 0x90, 0x21, 0xdf, 0x77, 0xe1, 0x60, 0x4c, 0xba, 0xb3, 0x56,
	0xe0, 0x0f, 0x43, 0x30, 0x13, 0x0e, 0x1b, 0x69, 0x07, 0x9f, 0x07, 0x9d, 0xbd, 0x09, 0x19, 0x4a,
	0x41, 0xc8, 0x72, 0xb8, 0x21, 0x67, 0x18, 0x86, 0x7b, 0x62, 0x08, 0x9a, 0xee, 0x9b, 0xd1, 0xda,
	0xca, 0x0f, 0x50, 0x5b, 0x7e, 0x55, 0x14, 0xc2, 0x55, 0xb1, 0x0e, 0x93, 0x91, 0xbb, 0x42, 0x69,
	0x77, 0xdf, 0x8d, 0xfa, 0x9e, 0xf6, 0xeb, 0x81, 0xf0, 0x0e, 0x08, 0x49, 0x3c, 0x66, 0xad, 0x93,
	0x9f, 0x73, 0x70, 0x98, 0xc5, 0xf7, 0xef, 0x74, 0x7f, 0xd7, 0x2f, 0xde, 0x67, 0x65, 0x38, 0xcc,
	0xca, 0x31, 0x98, 0x08, 0xae, 0xab, 0x15, 0x4d, 0x75, 0x09, 0x1f, 0x95, 0xc6, 0x83, 0xc9, 0x15,
	0x15, 0xad, 0xc2, 0x9e, 0x90, 0x11, 0xd6, 0x55, 0xf6, 0x49, 0xff, 0x27, 0x0c, 0xc0, 0xbf, 0xf3,
	0x52, 0xd6, 0xd8, 0x68, 0x59, 0x57, 0xa5, 0xd0, 0x0a, 0xcb, 0xba, 0x2a, 0xbc, 0x05, 0x47, 0xba,
	0xe4, 0x34, 0x2b, 0x5d, 0x3f, 0xe5, 0xfc, 0xd3, 0x82, 0x5e, 0xae, 0xff, 0x59, 0x5c, 0x1d, 0x80,
	0xdd, 0xa6, 0x61, 0x91, 0x80, 0xa5, 0x82, 0x33, 0x5c, 0x51, 0xd1, 0x11, 0x00, 0xa6, 0x26, 0x38,
	0xef, 0x0a, 0xee, 0xbb, 0x51, 0x36, 0xb3, 0xa2, 0xa2, 0x73, 0xb0, 0x9b, 0x0d, 0xd8, 0x17, 0x77,
	0x38, 0x04, 0x86, 0xa9, 0x10, 0x0e, 0x69, 0xf4, 0x51, 0xf2, 0x8c, 0x85, 0x7b, 0xc0, 0xc7, 0x65,
	0x33, 0x2b, 0x4b, 0xbf, 0xe6, 0xbc, 0x02, 0x58, 0x93, 0x95, 0x2d, 0x4c, 0x96, 0xfc, 0x7c, 0xbc,
	0xf0, 0x4c, 0xf1, 0x30, 0x62, 0x3b, 0x39, 0xd0, 0x15, 0x7a, 0x38, 0x0e, 0x4b, 0xfe, 0x18, 0x9d,
	0x70, 0x8e, 0x76, 0x0f, 0x4f, 0xa5, 0xda, 0x22, 0xd8, 0x2e, 0x8d, 0xb8, 0x8b, 0x4e, 0x06, 0xf3,
	0x57, 0x9d, 0x69, 0xe1, 0x6d, 0x28, 0x77, 0x4b, 0x70, 0x56, 0xf2, 0x76, 0x72, 0xde, 0x89, 0x4b,
	0x63, 0x2f, 0x2a, 0x5b, 0xba, 0xf1, 0xb0, 0x8e, 0xd5, 0x0d, 0xfc, 0x92, 0xc1, 0x1e, 0x0c, 0xce,
	0xc2, 0xa4, 0xdc, 0x9e, 0x2e, 0x8f, 0xc0, 0xc8, 0xb4, 0xf0, 0x2e, 0x1c, 0x4b, 0x4c, 0x72, 0x56,
	0x16, 0xbf, 0xcf, 0x79, 0xfd, 0x0f, 0x5d, 0x40, 0xc2, 0x0a, 0xd6, 0x4c, 0xb2, 0x58, 0xb5, 0x1d,
	0xa0, 0x2f, 0x49, 0xec, 0x4e, 0x62, 0xd0, 0x71, 0xc4, 0x67, 0x2e, 0x73, 0x67, 0xea, 0x1f, 0x8e,
	0x6f, 0xe0, 0x47, 0x64, 0x9d, 0xad, 0x2a, 0x61, 0xa5, 0xf9, 0xc2, 0xb3, 0x72, 0x12, 0x90, 0x8e,
	0x1f, 0x91, 0x8a, 0x47, 0x45, 0xc5, 0xc2, 0x4a, 0x93, 0xf1, 0x53, 0xd4, 0x23, 0xd9, 0x0a, 0xce,
	0xc0, 0xce, 0x3c, 0x66, 0xe4, 0x68, 0xe1, 0xd3, 0x7f, 0xc1, 0xd8, 0xaa, 0x63, 0xc7, 0x6e, 0xe2,
	0x5b, 0x00, 0x81, 0x8a, 0x8b, 0x4e, 0x25, 0xc5, 0xe9, 0xd0, 0x8e, 0x79, 0x31, 0xad, 0x39, 0x43,
	0xfd, 0x18, 0x26, 0x23, 0x42, 0x2d, 0x5a, 0x48, 0x0a, 0x11, 0x2f, 0x14, 0xf3, 0xa7, 0xfb, 0xf2,
	0x61, 0x6b, 0x63, 0x18, 0xf1, 0x94, 0x58, 0xf4, 0xbf, 0xa4, 0x00, 0x11, 0xed, 0x97, 0x3f, 0x99,
	0xce, 0xb8, 0x6d, 0x8b, 0x61, 0xb1, 0xb5, 0xe7, 0x16, 0x63, 0xc4, 0xde, 0x9e, 0x5b, 0x8c, 0x55,
	0x73, 0x31, 0x8c, 0x78, 0x6a, 0x6a, 0xf2, 0x16, 0x23, 0xfa, 0x6d, 0xf2, 0x16, 0x3b, 0x04, 0x5a,
	0x02, 0x13, 0x6d, 0xb2, 0x28, 0xfa, 0x7f, 0x0f, 0xb0, 0x1d, 0x92, 0x2c, 0x3f, 0xdf, 0x87, 0x07,
	0x5b, 0xf5, 0x0b, 0x0e, 0x0e, 0x76, 0x95, 0x29, 0xd1, 0xa5, 0xc4, 0x4a, 0xec, 0xa1, 0xbb, 0xf2,
	0x97, 0x07, 0xf4, 0x66, 0xd0, 0xbe, 0xf3, 0x14, 0xd4, 0x24, 0x1d, 0x10, 0x5d, 0xeb, 0xb9, 0x48,
	0x0a, 0xa1, 0x93, 0x5f, 0xce, 0x18, 0x25, 0xe0, 0xb0, 0x4d, 0x18, 0x4b, 0xe6, 0x30, 0x4e, 0x44,
	0x4c, 0xe6, 0x30, 0x5e, 0x75, 0x7b, 0x1f, 0x8a, 0x51, 0xa1, 0x0b, 0x25, 0x56, 0x7a, 0x17, 0xa9,
	0x8d, 0x3f, 0xd3, 0x9f, 0x13, 0x5b, 0xfe, 0x03, 0x0e, 0xf6, 0x76, 0x08, 0x32, 0xe8, 0x4c, 0xef,
	0x7d, 0x74, 0xca, 0x65, 0xfc, 0xd9, 0x3e, 0xbd, 0x18, 0x84, 0x2f, 0x39, 0xff, 0x5e, 0x12, 0x73,
	0xe9, 0x47, 0x97, 0xd3, 0x46, 0x8d, 0x15, 0x7d, 0xf8, 0x2b, 0x83, 0xba, 0x33, 0x74, 0x1f, 0x71,
	0x9e, 0x5e, 0x1a, 0xb9, 0xde, 0xa2, 0x0b, 0x29, 0x22, 0xc7, 0xaa, 0x0c, 0xfc, 0x2b, 0x03, 0x78,
	0x32, 0x38, 0x1f, 0x72, 0x80, 0x3a, 0x2f, 0x71, 0x28, 0x4d, 0xea, 0x3b, 0xaf, 0xd0, 0xfc, 0xb9,
	0x7e, 0xdd, 0x18, 0x8a, 0x8f, 0x39, 0xd8, 0x1f, 0x7f, 0x23, 0x41, 0x29, 0xf6, 0xd6, 0xe5, 0x9a,
	0xc8, 0x5f, 0x1c, 0xc4, 0x95, 0x21, 0xfa, 0x9a, 0x83, 0x43, 0x09, 0x2d, 0x36, 0xba, 0x92, 0x36,
	0x76, 0xfc, 0x05, 0x88, 0x7f, 0x75, 0x60, 0xff, 0x8e, 0x2a, 0x8f, 0x6b, 0x34, 0xd3, 0x54, 0x79,
	0x42, 0x6b, 0xcf, 0x5f, 0x19, 0xd4, 0xbd, 0x83, 0xd0, 0x68, 0x7b, 0x95, 0x86, 0xd0, 0x2e, 0xad,
	0x6d, 0x1a, 0x42, 0xbb, 0x75, 0x73, 0x57, 0xef, 0xfc, 0xf8, 0xb4, 0xcc, 0x3d, 0x79, 0x5a, 0xe6,
	0x7e, 0x7b, 0x5a, 0xe6, 0x3e, 0xd9, 0x29, 0xef, 0x7a, 0xb2, 0x53, 0xde, 0xf5, 0xcb, 0x4e, 0x79,
	0xd7, 0x83, 0xb3, 0x1b, 0x1a, 0xd9, 0x6c, 0x54, 0x9d, 0x86, 0x75, 0x4e, 0x95, 0x89, 0xac, 0x6c,
	0xca, 0x9a, 0x5e, 0x97, 0xab, 0xec, 0xef, 0x12, 0xa7, 0xb4, 0xaa, 0x72, 0xaa, 0xed, 0xbf, 0x22,
	0xa4, 0x65, 0x62, 0xbb, 0x5a, 0x70, 0xff, 0x38, 0x71, 0xfa, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x16, 0xf3, 0x65, 0x3d, 0x4c, 0x22, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LightClientClient is the client API for LightClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LightClientClient interface {
	ClientType(ctx context.Context, in *ClientTypeRequest, opts ...grpc.CallOption) (*ClientTypeResponse, error)
	GetLatestHeight(ctx context.Context, in *GetLatestHeightRequest, opts ...grpc.CallOption) (*GetLatestHeightResponse, error)
	IsFrozen(ctx context.Context, in *IsFrozenRequest, opts ...grpc.CallOption) (*IsFrozenResponse, error)
	GetFrozenHeight(ctx context.Context, in *GetFrozenHeightRequest, opts ...grpc.CallOption) (*GetFrozenHeightResponse, error)
	Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error)
	GetProofSpecs(ctx context.Context, in *GetProofSpecsRequest, opts ...grpc.CallOption) (*GetProofSpecsResponse, error)
	CheckHeaderAndUpdateState(ctx context.Context, in *CheckHeaderAndUpdateStateRequest, opts ...grpc.CallOption) (*CheckHeaderAndUpdateStateResponse, error)
	//rpc CheckMisbehaviourAndUpdateState(CheckMisbehaviourAndUpdateStateRequest) returns (CheckMisbehaviourAndUpdateStateResponse);
	CheckProposedHeaderAndUpdateState(ctx context.Context, in *CheckProposedHeaderAndUpdateStateRequest, opts ...grpc.CallOption) (*CheckProposedHeaderAndUpdateStateResponse, error)
	VerifyUpgrade(ctx context.Context, in *VerifyUpgradeRequest, opts ...grpc.CallOption) (*VerifyUpgradeResponse, error)
	ZeroCustomFields(ctx context.Context, in *ZeroCustomFieldsRequest, opts ...grpc.CallOption) (*ZeroCustomFieldsResponse, error)
	VerifyClientState(ctx context.Context, in *VerifyClientStateRequest, opts ...grpc.CallOption) (*VerifyClientStateResponse, error)
	VerifyClientConsensusState(ctx context.Context, in *VerifyClientConsensusStateRequest, opts ...grpc.CallOption) (*VerifyClientConsensusStateResponse, error)
	VerifyConnectionState(ctx context.Context, in *VerifyConnectionStateRequest, opts ...grpc.CallOption) (*VerifyConnectionStateResponse, error)
	VerifyChannelState(ctx context.Context, in *VerifyChannelStateRequest, opts ...grpc.CallOption) (*VerifyChannelStateResponse, error)
	VerifyPacketCommitment(ctx context.Context, in *VerifyPacketCommitmentRequest, opts ...grpc.CallOption) (*VerifyPacketCommitmentResponse, error)
	VerifyPacketAcknowledgement(ctx context.Context, in *VerifyPacketAcknowledgementRequest, opts ...grpc.CallOption) (*VerifyPacketAcknowledgementResponse, error)
	VerifyPacketReceiptAbsence(ctx context.Context, in *VerifyPacketReceiptAbsenceRequest, opts ...grpc.CallOption) (*VerifyPacketReceiptAbsenceResponse, error)
	VerifyNextSequenceRecv(ctx context.Context, in *VerifyNextSequenceRecvRequest, opts ...grpc.CallOption) (*VerifyNextSequenceRecvResponse, error)
}

type lightClientClient struct {
	cc grpc1.ClientConn
}

func NewLightClientClient(cc grpc1.ClientConn) LightClientClient {
	return &lightClientClient{cc}
}

func (c *lightClientClient) ClientType(ctx context.Context, in *ClientTypeRequest, opts ...grpc.CallOption) (*ClientTypeResponse, error) {
	out := new(ClientTypeResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclientd.fabric.v1.LightClient/ClientType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightClientClient) GetLatestHeight(ctx context.Context, in *GetLatestHeightRequest, opts ...grpc.CallOption) (*GetLatestHeightResponse, error) {
	out := new(GetLatestHeightResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclientd.fabric.v1.LightClient/GetLatestHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightClientClient) IsFrozen(ctx context.Context, in *IsFrozenRequest, opts ...grpc.CallOption) (*IsFrozenResponse, error) {
	out := new(IsFrozenResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclientd.fabric.v1.LightClient/IsFrozen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightClientClient) GetFrozenHeight(ctx context.Context, in *GetFrozenHeightRequest, opts ...grpc.CallOption) (*GetFrozenHeightResponse, error) {
	out := new(GetFrozenHeightResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclientd.fabric.v1.LightClient/GetFrozenHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightClientClient) Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error) {
	out := new(ValidateResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclientd.fabric.v1.LightClient/Validate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightClientClient) GetProofSpecs(ctx context.Context, in *GetProofSpecsRequest, opts ...grpc.CallOption) (*GetProofSpecsResponse, error) {
	out := new(GetProofSpecsResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclientd.fabric.v1.LightClient/GetProofSpecs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightClientClient) CheckHeaderAndUpdateState(ctx context.Context, in *CheckHeaderAndUpdateStateRequest, opts ...grpc.CallOption) (*CheckHeaderAndUpdateStateResponse, error) {
	out := new(CheckHeaderAndUpdateStateResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclientd.fabric.v1.LightClient/CheckHeaderAndUpdateState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightClientClient) CheckProposedHeaderAndUpdateState(ctx context.Context, in *CheckProposedHeaderAndUpdateStateRequest, opts ...grpc.CallOption) (*CheckProposedHeaderAndUpdateStateResponse, error) {
	out := new(CheckProposedHeaderAndUpdateStateResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclientd.fabric.v1.LightClient/CheckProposedHeaderAndUpdateState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightClientClient) VerifyUpgrade(ctx context.Context, in *VerifyUpgradeRequest, opts ...grpc.CallOption) (*VerifyUpgradeResponse, error) {
	out := new(VerifyUpgradeResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclientd.fabric.v1.LightClient/VerifyUpgrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightClientClient) ZeroCustomFields(ctx context.Context, in *ZeroCustomFieldsRequest, opts ...grpc.CallOption) (*ZeroCustomFieldsResponse, error) {
	out := new(ZeroCustomFieldsResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclientd.fabric.v1.LightClient/ZeroCustomFields", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightClientClient) VerifyClientState(ctx context.Context, in *VerifyClientStateRequest, opts ...grpc.CallOption) (*VerifyClientStateResponse, error) {
	out := new(VerifyClientStateResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclientd.fabric.v1.LightClient/VerifyClientState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightClientClient) VerifyClientConsensusState(ctx context.Context, in *VerifyClientConsensusStateRequest, opts ...grpc.CallOption) (*VerifyClientConsensusStateResponse, error) {
	out := new(VerifyClientConsensusStateResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclientd.fabric.v1.LightClient/VerifyClientConsensusState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightClientClient) VerifyConnectionState(ctx context.Context, in *VerifyConnectionStateRequest, opts ...grpc.CallOption) (*VerifyConnectionStateResponse, error) {
	out := new(VerifyConnectionStateResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclientd.fabric.v1.LightClient/VerifyConnectionState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightClientClient) VerifyChannelState(ctx context.Context, in *VerifyChannelStateRequest, opts ...grpc.CallOption) (*VerifyChannelStateResponse, error) {
	out := new(VerifyChannelStateResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclientd.fabric.v1.LightClient/VerifyChannelState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightClientClient) VerifyPacketCommitment(ctx context.Context, in *VerifyPacketCommitmentRequest, opts ...grpc.CallOption) (*VerifyPacketCommitmentResponse, error) {
	out := new(VerifyPacketCommitmentResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclientd.fabric.v1.LightClient/VerifyPacketCommitment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightClientClient) VerifyPacketAcknowledgement(ctx context.Context, in *VerifyPacketAcknowledgementRequest, opts ...grpc.CallOption) (*VerifyPacketAcknowledgementResponse, error) {
	out := new(VerifyPacketAcknowledgementResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclientd.fabric.v1.LightClient/VerifyPacketAcknowledgement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightClientClient) VerifyPacketReceiptAbsence(ctx context.Context, in *VerifyPacketReceiptAbsenceRequest, opts ...grpc.CallOption) (*VerifyPacketReceiptAbsenceResponse, error) {
	out := new(VerifyPacketReceiptAbsenceResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclientd.fabric.v1.LightClient/VerifyPacketReceiptAbsence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightClientClient) VerifyNextSequenceRecv(ctx context.Context, in *VerifyNextSequenceRecvRequest, opts ...grpc.CallOption) (*VerifyNextSequenceRecvResponse, error) {
	out := new(VerifyNextSequenceRecvResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclientd.fabric.v1.LightClient/VerifyNextSequenceRecv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LightClientServer is the server API for LightClient service.
type LightClientServer interface {
	ClientType(context.Context, *ClientTypeRequest) (*ClientTypeResponse, error)
	GetLatestHeight(context.Context, *GetLatestHeightRequest) (*GetLatestHeightResponse, error)
	IsFrozen(context.Context, *IsFrozenRequest) (*IsFrozenResponse, error)
	GetFrozenHeight(context.Context, *GetFrozenHeightRequest) (*GetFrozenHeightResponse, error)
	Validate(context.Context, *ValidateRequest) (*ValidateResponse, error)
	GetProofSpecs(context.Context, *GetProofSpecsRequest) (*GetProofSpecsResponse, error)
	CheckHeaderAndUpdateState(context.Context, *CheckHeaderAndUpdateStateRequest) (*CheckHeaderAndUpdateStateResponse, error)
	//rpc CheckMisbehaviourAndUpdateState(CheckMisbehaviourAndUpdateStateRequest) returns (CheckMisbehaviourAndUpdateStateResponse);
	CheckProposedHeaderAndUpdateState(context.Context, *CheckProposedHeaderAndUpdateStateRequest) (*CheckProposedHeaderAndUpdateStateResponse, error)
	VerifyUpgrade(context.Context, *VerifyUpgradeRequest) (*VerifyUpgradeResponse, error)
	ZeroCustomFields(context.Context, *ZeroCustomFieldsRequest) (*ZeroCustomFieldsResponse, error)
	VerifyClientState(context.Context, *VerifyClientStateRequest) (*VerifyClientStateResponse, error)
	VerifyClientConsensusState(context.Context, *VerifyClientConsensusStateRequest) (*VerifyClientConsensusStateResponse, error)
	VerifyConnectionState(context.Context, *VerifyConnectionStateRequest) (*VerifyConnectionStateResponse, error)
	VerifyChannelState(context.Context, *VerifyChannelStateRequest) (*VerifyChannelStateResponse, error)
	VerifyPacketCommitment(context.Context, *VerifyPacketCommitmentRequest) (*VerifyPacketCommitmentResponse, error)
	VerifyPacketAcknowledgement(context.Context, *VerifyPacketAcknowledgementRequest) (*VerifyPacketAcknowledgementResponse, error)
	VerifyPacketReceiptAbsence(context.Context, *VerifyPacketReceiptAbsenceRequest) (*VerifyPacketReceiptAbsenceResponse, error)
	VerifyNextSequenceRecv(context.Context, *VerifyNextSequenceRecvRequest) (*VerifyNextSequenceRecvResponse, error)
}

// UnimplementedLightClientServer can be embedded to have forward compatible implementations.
type UnimplementedLightClientServer struct {
}

func (*UnimplementedLightClientServer) ClientType(ctx context.Context, req *ClientTypeRequest) (*ClientTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientType not implemented")
}
func (*UnimplementedLightClientServer) GetLatestHeight(ctx context.Context, req *GetLatestHeightRequest) (*GetLatestHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestHeight not implemented")
}
func (*UnimplementedLightClientServer) IsFrozen(ctx context.Context, req *IsFrozenRequest) (*IsFrozenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsFrozen not implemented")
}
func (*UnimplementedLightClientServer) GetFrozenHeight(ctx context.Context, req *GetFrozenHeightRequest) (*GetFrozenHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFrozenHeight not implemented")
}
func (*UnimplementedLightClientServer) Validate(ctx context.Context, req *ValidateRequest) (*ValidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (*UnimplementedLightClientServer) GetProofSpecs(ctx context.Context, req *GetProofSpecsRequest) (*GetProofSpecsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProofSpecs not implemented")
}
func (*UnimplementedLightClientServer) CheckHeaderAndUpdateState(ctx context.Context, req *CheckHeaderAndUpdateStateRequest) (*CheckHeaderAndUpdateStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHeaderAndUpdateState not implemented")
}
func (*UnimplementedLightClientServer) CheckProposedHeaderAndUpdateState(ctx context.Context, req *CheckProposedHeaderAndUpdateStateRequest) (*CheckProposedHeaderAndUpdateStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckProposedHeaderAndUpdateState not implemented")
}
func (*UnimplementedLightClientServer) VerifyUpgrade(ctx context.Context, req *VerifyUpgradeRequest) (*VerifyUpgradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyUpgrade not implemented")
}
func (*UnimplementedLightClientServer) ZeroCustomFields(ctx context.Context, req *ZeroCustomFieldsRequest) (*ZeroCustomFieldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZeroCustomFields not implemented")
}
func (*UnimplementedLightClientServer) VerifyClientState(ctx context.Context, req *VerifyClientStateRequest) (*VerifyClientStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyClientState not implemented")
}
func (*UnimplementedLightClientServer) VerifyClientConsensusState(ctx context.Context, req *VerifyClientConsensusStateRequest) (*VerifyClientConsensusStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyClientConsensusState not implemented")
}
func (*UnimplementedLightClientServer) VerifyConnectionState(ctx context.Context, req *VerifyConnectionStateRequest) (*VerifyConnectionStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyConnectionState not implemented")
}
func (*UnimplementedLightClientServer) VerifyChannelState(ctx context.Context, req *VerifyChannelStateRequest) (*VerifyChannelStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyChannelState not implemented")
}
func (*UnimplementedLightClientServer) VerifyPacketCommitment(ctx context.Context, req *VerifyPacketCommitmentRequest) (*VerifyPacketCommitmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPacketCommitment not implemented")
}
func (*UnimplementedLightClientServer) VerifyPacketAcknowledgement(ctx context.Context, req *VerifyPacketAcknowledgementRequest) (*VerifyPacketAcknowledgementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPacketAcknowledgement not implemented")
}
func (*UnimplementedLightClientServer) VerifyPacketReceiptAbsence(ctx context.Context, req *VerifyPacketReceiptAbsenceRequest) (*VerifyPacketReceiptAbsenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPacketReceiptAbsence not implemented")
}
func (*UnimplementedLightClientServer) VerifyNextSequenceRecv(ctx context.Context, req *VerifyNextSequenceRecvRequest) (*VerifyNextSequenceRecvResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyNextSequenceRecv not implemented")
}

func RegisterLightClientServer(s grpc1.Server, srv LightClientServer) {
	s.RegisterService(&_LightClient_serviceDesc, srv)
}

func _LightClient_ClientType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightClientServer).ClientType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclientd.fabric.v1.LightClient/ClientType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightClientServer).ClientType(ctx, req.(*ClientTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightClient_GetLatestHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightClientServer).GetLatestHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclientd.fabric.v1.LightClient/GetLatestHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightClientServer).GetLatestHeight(ctx, req.(*GetLatestHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightClient_IsFrozen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsFrozenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightClientServer).IsFrozen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclientd.fabric.v1.LightClient/IsFrozen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightClientServer).IsFrozen(ctx, req.(*IsFrozenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightClient_GetFrozenHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFrozenHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightClientServer).GetFrozenHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclientd.fabric.v1.LightClient/GetFrozenHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightClientServer).GetFrozenHeight(ctx, req.(*GetFrozenHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightClient_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightClientServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclientd.fabric.v1.LightClient/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightClientServer).Validate(ctx, req.(*ValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightClient_GetProofSpecs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProofSpecsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightClientServer).GetProofSpecs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclientd.fabric.v1.LightClient/GetProofSpecs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightClientServer).GetProofSpecs(ctx, req.(*GetProofSpecsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightClient_CheckHeaderAndUpdateState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckHeaderAndUpdateStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightClientServer).CheckHeaderAndUpdateState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclientd.fabric.v1.LightClient/CheckHeaderAndUpdateState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightClientServer).CheckHeaderAndUpdateState(ctx, req.(*CheckHeaderAndUpdateStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightClient_CheckProposedHeaderAndUpdateState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckProposedHeaderAndUpdateStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightClientServer).CheckProposedHeaderAndUpdateState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclientd.fabric.v1.LightClient/CheckProposedHeaderAndUpdateState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightClientServer).CheckProposedHeaderAndUpdateState(ctx, req.(*CheckProposedHeaderAndUpdateStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightClient_VerifyUpgrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyUpgradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightClientServer).VerifyUpgrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclientd.fabric.v1.LightClient/VerifyUpgrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightClientServer).VerifyUpgrade(ctx, req.(*VerifyUpgradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightClient_ZeroCustomFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZeroCustomFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightClientServer).ZeroCustomFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclientd.fabric.v1.LightClient/ZeroCustomFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightClientServer).ZeroCustomFields(ctx, req.(*ZeroCustomFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightClient_VerifyClientState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyClientStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightClientServer).VerifyClientState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclientd.fabric.v1.LightClient/VerifyClientState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightClientServer).VerifyClientState(ctx, req.(*VerifyClientStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightClient_VerifyClientConsensusState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyClientConsensusStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightClientServer).VerifyClientConsensusState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclientd.fabric.v1.LightClient/VerifyClientConsensusState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightClientServer).VerifyClientConsensusState(ctx, req.(*VerifyClientConsensusStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightClient_VerifyConnectionState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyConnectionStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightClientServer).VerifyConnectionState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclientd.fabric.v1.LightClient/VerifyConnectionState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightClientServer).VerifyConnectionState(ctx, req.(*VerifyConnectionStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightClient_VerifyChannelState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyChannelStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightClientServer).VerifyChannelState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclientd.fabric.v1.LightClient/VerifyChannelState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightClientServer).VerifyChannelState(ctx, req.(*VerifyChannelStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightClient_VerifyPacketCommitment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyPacketCommitmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightClientServer).VerifyPacketCommitment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclientd.fabric.v1.LightClient/VerifyPacketCommitment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightClientServer).VerifyPacketCommitment(ctx, req.(*VerifyPacketCommitmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightClient_VerifyPacketAcknowledgement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyPacketAcknowledgementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightClientServer).VerifyPacketAcknowledgement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclientd.fabric.v1.LightClient/VerifyPacketAcknowledgement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightClientServer).VerifyPacketAcknowledgement(ctx, req.(*VerifyPacketAcknowledgementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightClient_VerifyPacketReceiptAbsence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyPacketReceiptAbsenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightClientServer).VerifyPacketReceiptAbsence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclientd.fabric.v1.LightClient/VerifyPacketReceiptAbsence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightClientServer).VerifyPacketReceiptAbsence(ctx, req.(*VerifyPacketReceiptAbsenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightClient_VerifyNextSequenceRecv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyNextSequenceRecvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightClientServer).VerifyNextSequenceRecv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclientd.fabric.v1.LightClient/VerifyNextSequenceRecv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightClientServer).VerifyNextSequenceRecv(ctx, req.(*VerifyNextSequenceRecvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LightClient_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ibc.lightclientd.fabric.v1.LightClient",
	HandlerType: (*LightClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClientType",
			Handler:    _LightClient_ClientType_Handler,
		},
		{
			MethodName: "GetLatestHeight",
			Handler:    _LightClient_GetLatestHeight_Handler,
		},
		{
			MethodName: "IsFrozen",
			Handler:    _LightClient_IsFrozen_Handler,
		},
		{
			MethodName: "GetFrozenHeight",
			Handler:    _LightClient_GetFrozenHeight_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _LightClient_Validate_Handler,
		},
		{
			MethodName: "GetProofSpecs",
			Handler:    _LightClient_GetProofSpecs_Handler,
		},
		{
			MethodName: "CheckHeaderAndUpdateState",
			Handler:    _LightClient_CheckHeaderAndUpdateState_Handler,
		},
		{
			MethodName: "CheckProposedHeaderAndUpdateState",
			Handler:    _LightClient_CheckProposedHeaderAndUpdateState_Handler,
		},
		{
			MethodName: "VerifyUpgrade",
			Handler:    _LightClient_VerifyUpgrade_Handler,
		},
		{
			MethodName: "ZeroCustomFields",
			Handler:    _LightClient_ZeroCustomFields_Handler,
		},
		{
			MethodName: "VerifyClientState",
			Handler:    _LightClient_VerifyClientState_Handler,
		},
		{
			MethodName: "VerifyClientConsensusState",
			Handler:    _LightClient_VerifyClientConsensusState_Handler,
		},
		{
			MethodName: "VerifyConnectionState",
			Handler:    _LightClient_VerifyConnectionState_Handler,
		},
		{
			MethodName: "VerifyChannelState",
			Handler:    _LightClient_VerifyChannelState_Handler,
		},
		{
			MethodName: "VerifyPacketCommitment",
			Handler:    _LightClient_VerifyPacketCommitment_Handler,
		},
		{
			MethodName: "VerifyPacketAcknowledgement",
			Handler:    _LightClient_VerifyPacketAcknowledgement_Handler,
		},
		{
			MethodName: "VerifyPacketReceiptAbsence",
			Handler:    _LightClient_VerifyPacketReceiptAbsence_Handler,
		},
		{
			MethodName: "VerifyNextSequenceRecv",
			Handler:    _LightClient_VerifyNextSequenceRecv_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ibc/lightclientd/fabric/v1/fabric.proto",
}

func (m *State) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *State) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *State) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConsensusStates) > 0 {
		for k := range m.ConsensusStates {
			v := m.ConsensusStates[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintFabric(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintFabric(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintFabric(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ClientState != nil {
		{
			size, err := m.ClientState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClientTypeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientTypeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientTypeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClientTypeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientTypeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientTypeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClientType) > 0 {
		i -= len(m.ClientType)
		copy(dAtA[i:], m.ClientType)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.ClientType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetLatestHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLatestHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLatestHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetLatestHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLatestHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLatestHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != nil {
		{
			size, err := m.Height.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IsFrozenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsFrozenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsFrozenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IsFrozenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsFrozenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsFrozenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsFrozen {
		i--
		if m.IsFrozen {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetFrozenHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFrozenHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetFrozenHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetFrozenHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFrozenHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetFrozenHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != nil {
		{
			size, err := m.Height.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetProofSpecsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetProofSpecsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetProofSpecsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetProofSpecsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetProofSpecsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetProofSpecsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProofSpecs) > 0 {
		for iNdEx := len(m.ProofSpecs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProofSpecs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFabric(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CheckHeaderAndUpdateStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckHeaderAndUpdateStateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckHeaderAndUpdateStateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CheckHeaderAndUpdateStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckHeaderAndUpdateStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckHeaderAndUpdateStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CheckProposedHeaderAndUpdateStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckProposedHeaderAndUpdateStateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckProposedHeaderAndUpdateStateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CheckProposedHeaderAndUpdateStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckProposedHeaderAndUpdateStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckProposedHeaderAndUpdateStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifyUpgradeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyUpgradeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyUpgradeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProofUpgrade) > 0 {
		i -= len(m.ProofUpgrade)
		copy(dAtA[i:], m.ProofUpgrade)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.ProofUpgrade)))
		i--
		dAtA[i] = 0x22
	}
	if m.UpgradeHeight != nil {
		{
			size, err := m.UpgradeHeight.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.NewClient != nil {
		{
			size, err := m.NewClient.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifyUpgradeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyUpgradeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyUpgradeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ZeroCustomFieldsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZeroCustomFieldsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZeroCustomFieldsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ZeroCustomFieldsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZeroCustomFieldsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZeroCustomFieldsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClientState != nil {
		{
			size, err := m.ClientState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifyClientStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyClientStateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyClientStateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClientState != nil {
		{
			size, err := m.ClientState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CounterpartyClientIdentifier) > 0 {
		i -= len(m.CounterpartyClientIdentifier)
		copy(dAtA[i:], m.CounterpartyClientIdentifier)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.CounterpartyClientIdentifier)))
		i--
		dAtA[i] = 0x22
	}
	if m.Prefix != nil {
		{
			size, err := m.Prefix.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != nil {
		{
			size, err := m.Height.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifyClientStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyClientStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyClientStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifyClientConsensusStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyClientConsensusStateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyClientConsensusStateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConsensusState != nil {
		{
			size, err := m.ConsensusState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x32
	}
	if m.Prefix != nil {
		{
			size, err := m.Prefix.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ConsensusHeight != nil {
		{
			size, err := m.ConsensusHeight.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.CounterpartyClientIdentifier) > 0 {
		i -= len(m.CounterpartyClientIdentifier)
		copy(dAtA[i:], m.CounterpartyClientIdentifier)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.CounterpartyClientIdentifier)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != nil {
		{
			size, err := m.Height.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifyClientConsensusStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyClientConsensusStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyClientConsensusStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifyConnectionStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyConnectionStateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyConnectionStateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConnectionEnd != nil {
		{
			size, err := m.ConnectionEnd.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x22
	}
	if m.Prefix != nil {
		{
			size, err := m.Prefix.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != nil {
		{
			size, err := m.Height.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifyConnectionStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyConnectionStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyConnectionStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifyChannelStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyChannelStateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyChannelStateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Channel != nil {
		{
			size, err := m.Channel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x22
	}
	if m.Prefix != nil {
		{
			size, err := m.Prefix.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != nil {
		{
			size, err := m.Height.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifyChannelStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyChannelStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyChannelStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifyPacketCommitmentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyPacketCommitmentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyPacketCommitmentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CommitmentBytes) > 0 {
		i -= len(m.CommitmentBytes)
		copy(dAtA[i:], m.CommitmentBytes)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.CommitmentBytes)))
		i--
		dAtA[i] = 0x42
	}
	if m.Sequence != 0 {
		i = encodeVarintFabric(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x38
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x22
	}
	if m.Prefix != nil {
		{
			size, err := m.Prefix.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != nil {
		{
			size, err := m.Height.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifyPacketCommitmentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyPacketCommitmentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyPacketCommitmentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifyPacketAcknowledgementRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyPacketAcknowledgementRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyPacketAcknowledgementRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Acknowledgement) > 0 {
		i -= len(m.Acknowledgement)
		copy(dAtA[i:], m.Acknowledgement)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.Acknowledgement)))
		i--
		dAtA[i] = 0x42
	}
	if m.Sequence != 0 {
		i = encodeVarintFabric(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x38
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x22
	}
	if m.Prefix != nil {
		{
			size, err := m.Prefix.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != nil {
		{
			size, err := m.Height.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifyPacketAcknowledgementResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyPacketAcknowledgementResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyPacketAcknowledgementResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifyPacketReceiptAbsenceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyPacketReceiptAbsenceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyPacketReceiptAbsenceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sequence != 0 {
		i = encodeVarintFabric(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x38
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x22
	}
	if m.Prefix != nil {
		{
			size, err := m.Prefix.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != nil {
		{
			size, err := m.Height.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifyPacketReceiptAbsenceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyPacketReceiptAbsenceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyPacketReceiptAbsenceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifyNextSequenceRecvRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyNextSequenceRecvRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyNextSequenceRecvRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextSequenceRecv != 0 {
		i = encodeVarintFabric(dAtA, i, uint64(m.NextSequenceRecv))
		i--
		dAtA[i] = 0x38
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x22
	}
	if m.Prefix != nil {
		{
			size, err := m.Prefix.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != nil {
		{
			size, err := m.Height.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifyNextSequenceRecvResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyNextSequenceRecvResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyNextSequenceRecvResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFabric(dAtA []byte, offset int, v uint64) int {
	offset -= sovFabric(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *State) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientState != nil {
		l = m.ClientState.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	if len(m.ConsensusStates) > 0 {
		for k, v := range m.ConsensusStates {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFabric(uint64(l))
			}
			mapEntrySize := 1 + sovFabric(uint64(k)) + l
			n += mapEntrySize + 1 + sovFabric(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *ClientTypeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *ClientTypeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClientType)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *GetLatestHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *GetLatestHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != nil {
		l = m.Height.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *IsFrozenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *IsFrozenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsFrozen {
		n += 2
	}
	return n
}

func (m *GetFrozenHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *GetFrozenHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != nil {
		l = m.Height.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *ValidateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *ValidateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *GetProofSpecsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *GetProofSpecsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ProofSpecs) > 0 {
		for _, e := range m.ProofSpecs {
			l = e.Size()
			n += 1 + l + sovFabric(uint64(l))
		}
	}
	return n
}

func (m *CheckHeaderAndUpdateStateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *CheckHeaderAndUpdateStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *CheckProposedHeaderAndUpdateStateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *CheckProposedHeaderAndUpdateStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *VerifyUpgradeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.NewClient != nil {
		l = m.NewClient.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.UpgradeHeight != nil {
		l = m.UpgradeHeight.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	l = len(m.ProofUpgrade)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *VerifyUpgradeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *ZeroCustomFieldsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *ZeroCustomFieldsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientState != nil {
		l = m.ClientState.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *VerifyClientStateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.Height != nil {
		l = m.Height.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.Prefix != nil {
		l = m.Prefix.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	l = len(m.CounterpartyClientIdentifier)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.ClientState != nil {
		l = m.ClientState.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *VerifyClientStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *VerifyClientConsensusStateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.Height != nil {
		l = m.Height.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	l = len(m.CounterpartyClientIdentifier)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.ConsensusHeight != nil {
		l = m.ConsensusHeight.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.Prefix != nil {
		l = m.Prefix.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.ConsensusState != nil {
		l = m.ConsensusState.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *VerifyClientConsensusStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *VerifyConnectionStateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.Height != nil {
		l = m.Height.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.Prefix != nil {
		l = m.Prefix.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.ConnectionEnd != nil {
		l = m.ConnectionEnd.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *VerifyConnectionStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *VerifyChannelStateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.Height != nil {
		l = m.Height.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.Prefix != nil {
		l = m.Prefix.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *VerifyChannelStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *VerifyPacketCommitmentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.Height != nil {
		l = m.Height.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.Prefix != nil {
		l = m.Prefix.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.Sequence != 0 {
		n += 1 + sovFabric(uint64(m.Sequence))
	}
	l = len(m.CommitmentBytes)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *VerifyPacketCommitmentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *VerifyPacketAcknowledgementRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.Height != nil {
		l = m.Height.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.Prefix != nil {
		l = m.Prefix.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.Sequence != 0 {
		n += 1 + sovFabric(uint64(m.Sequence))
	}
	l = len(m.Acknowledgement)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *VerifyPacketAcknowledgementResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *VerifyPacketReceiptAbsenceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.Height != nil {
		l = m.Height.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.Prefix != nil {
		l = m.Prefix.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.Sequence != 0 {
		n += 1 + sovFabric(uint64(m.Sequence))
	}
	return n
}

func (m *VerifyPacketReceiptAbsenceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *VerifyNextSequenceRecvRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.Height != nil {
		l = m.Height.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.Prefix != nil {
		l = m.Prefix.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.NextSequenceRecv != 0 {
		n += 1 + sovFabric(uint64(m.NextSequenceRecv))
	}
	return n
}

func (m *VerifyNextSequenceRecvResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func sovFabric(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFabric(x uint64) (n int) {
	return sovFabric(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *State) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: State: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: State: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientState == nil {
				m.ClientState = &types.ClientState{}
			}
			if err := m.ClientState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusStates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConsensusStates == nil {
				m.ConsensusStates = make(map[uint64]*types.ConsensusState)
			}
			var mapkey uint64
			var mapvalue *types.ConsensusState
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFabric
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFabric
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFabric
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFabric
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthFabric
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &types.ConsensusState{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFabric(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFabric
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ConsensusStates[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientTypeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientTypeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientTypeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientTypeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientTypeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientTypeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLatestHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLatestHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLatestHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLatestHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLatestHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLatestHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Height == nil {
				m.Height = &types1.Height{}
			}
			if err := m.Height.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsFrozenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsFrozenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsFrozenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsFrozenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsFrozenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsFrozenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFrozen", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFrozen = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFrozenHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFrozenHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFrozenHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFrozenHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFrozenHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFrozenHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Height == nil {
				m.Height = &types1.Height{}
			}
			if err := m.Height.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetProofSpecsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetProofSpecsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetProofSpecsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetProofSpecsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetProofSpecsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetProofSpecsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofSpecs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofSpecs = append(m.ProofSpecs, &_go.ProofSpec{})
			if err := m.ProofSpecs[len(m.ProofSpecs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckHeaderAndUpdateStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckHeaderAndUpdateStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckHeaderAndUpdateStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &types.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckHeaderAndUpdateStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckHeaderAndUpdateStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckHeaderAndUpdateStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckProposedHeaderAndUpdateStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckProposedHeaderAndUpdateStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckProposedHeaderAndUpdateStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &types.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckProposedHeaderAndUpdateStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckProposedHeaderAndUpdateStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckProposedHeaderAndUpdateStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyUpgradeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyUpgradeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyUpgradeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewClient", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewClient == nil {
				m.NewClient = &types.ClientState{}
			}
			if err := m.NewClient.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradeHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpgradeHeight == nil {
				m.UpgradeHeight = &types1.Height{}
			}
			if err := m.UpgradeHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofUpgrade", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofUpgrade = append(m.ProofUpgrade[:0], dAtA[iNdEx:postIndex]...)
			if m.ProofUpgrade == nil {
				m.ProofUpgrade = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyUpgradeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyUpgradeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyUpgradeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZeroCustomFieldsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZeroCustomFieldsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZeroCustomFieldsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZeroCustomFieldsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZeroCustomFieldsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZeroCustomFieldsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientState == nil {
				m.ClientState = &types.ClientState{}
			}
			if err := m.ClientState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyClientStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyClientStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyClientStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Height == nil {
				m.Height = &types1.Height{}
			}
			if err := m.Height.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Prefix == nil {
				m.Prefix = &types2.MerklePrefix{}
			}
			if err := m.Prefix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterpartyClientIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CounterpartyClientIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientState == nil {
				m.ClientState = &types.ClientState{}
			}
			if err := m.ClientState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyClientStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyClientStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyClientStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyClientConsensusStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyClientConsensusStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyClientConsensusStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Height == nil {
				m.Height = &types1.Height{}
			}
			if err := m.Height.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterpartyClientIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CounterpartyClientIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConsensusHeight == nil {
				m.ConsensusHeight = &types1.Height{}
			}
			if err := m.ConsensusHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Prefix == nil {
				m.Prefix = &types2.MerklePrefix{}
			}
			if err := m.Prefix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConsensusState == nil {
				m.ConsensusState = &types.ConsensusState{}
			}
			if err := m.ConsensusState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyClientConsensusStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyClientConsensusStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyClientConsensusStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyConnectionStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyConnectionStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyConnectionStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Height == nil {
				m.Height = &types1.Height{}
			}
			if err := m.Height.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Prefix == nil {
				m.Prefix = &types2.MerklePrefix{}
			}
			if err := m.Prefix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionEnd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConnectionEnd == nil {
				m.ConnectionEnd = &types3.ConnectionEnd{}
			}
			if err := m.ConnectionEnd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyConnectionStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyConnectionStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyConnectionStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyChannelStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyChannelStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyChannelStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Height == nil {
				m.Height = &types1.Height{}
			}
			if err := m.Height.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Prefix == nil {
				m.Prefix = &types2.MerklePrefix{}
			}
			if err := m.Prefix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &types4.Channel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyChannelStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyChannelStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyChannelStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyPacketCommitmentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyPacketCommitmentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyPacketCommitmentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Height == nil {
				m.Height = &types1.Height{}
			}
			if err := m.Height.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Prefix == nil {
				m.Prefix = &types2.MerklePrefix{}
			}
			if err := m.Prefix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitmentBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommitmentBytes = append(m.CommitmentBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.CommitmentBytes == nil {
				m.CommitmentBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyPacketCommitmentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyPacketCommitmentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyPacketCommitmentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyPacketAcknowledgementRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyPacketAcknowledgementRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyPacketAcknowledgementRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Height == nil {
				m.Height = &types1.Height{}
			}
			if err := m.Height.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Prefix == nil {
				m.Prefix = &types2.MerklePrefix{}
			}
			if err := m.Prefix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Acknowledgement", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Acknowledgement = append(m.Acknowledgement[:0], dAtA[iNdEx:postIndex]...)
			if m.Acknowledgement == nil {
				m.Acknowledgement = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyPacketAcknowledgementResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyPacketAcknowledgementResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyPacketAcknowledgementResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyPacketReceiptAbsenceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyPacketReceiptAbsenceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyPacketReceiptAbsenceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Height == nil {
				m.Height = &types1.Height{}
			}
			if err := m.Height.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Prefix == nil {
				m.Prefix = &types2.MerklePrefix{}
			}
			if err := m.Prefix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyPacketReceiptAbsenceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyPacketReceiptAbsenceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyPacketReceiptAbsenceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyNextSequenceRecvRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyNextSequenceRecvRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyNextSequenceRecvRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Height == nil {
				m.Height = &types1.Height{}
			}
			if err := m.Height.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Prefix == nil {
				m.Prefix = &types2.MerklePrefix{}
			}
			if err := m.Prefix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextSequenceRecv", wireType)
			}
			m.NextSequenceRecv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextSequenceRecv |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyNextSequenceRecvResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyNextSequenceRecvResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyNextSequenceRecvResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFabric(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFabric
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFabric
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFabric
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFabric        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFabric          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFabric = fmt.Errorf("proto: unexpected end of group")
)
