// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/lightclientd/fabric/v1/fabric.proto

package types

import (
	context "context"
	fmt "fmt"
	_go "github.com/confio/ics23/go"
	types3 "github.com/cosmos/cosmos-sdk/codec/types"
	types1 "github.com/cosmos/ibc-go/modules/core/02-client/types"
	types4 "github.com/cosmos/ibc-go/modules/core/03-connection/types"
	types5 "github.com/cosmos/ibc-go/modules/core/04-channel/types"
	types2 "github.com/cosmos/ibc-go/modules/core/23-commitment/types"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/hyperledger-labs/yui-fabric-ibc/x/ibc/light-clients/xx-fabric/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// State
type State struct {
	Id              string                           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientState     *types.ClientState               `protobuf:"bytes,2,opt,name=client_state,json=clientState,proto3" json:"client_state,omitempty"`
	ConsensusStates map[uint64]*types.ConsensusState `protobuf:"bytes,3,rep,name=consensus_states,json=consensusStates,proto3" json:"consensus_states,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *State) Reset()         { *m = State{} }
func (m *State) String() string { return proto.CompactTextString(m) }
func (*State) ProtoMessage()    {}
func (*State) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{0}
}
func (m *State) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *State) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_State.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *State) XXX_Merge(src proto.Message) {
	xxx_messageInfo_State.Merge(m, src)
}
func (m *State) XXX_Size() int {
	return m.Size()
}
func (m *State) XXX_DiscardUnknown() {
	xxx_messageInfo_State.DiscardUnknown(m)
}

var xxx_messageInfo_State proto.InternalMessageInfo

func (m *State) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *State) GetClientState() *types.ClientState {
	if m != nil {
		return m.ClientState
	}
	return nil
}

func (m *State) GetConsensusStates() map[uint64]*types.ConsensusState {
	if m != nil {
		return m.ConsensusStates
	}
	return nil
}

// rpc ClientType
type ClientTypeRequest struct {
	State *State `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *ClientTypeRequest) Reset()         { *m = ClientTypeRequest{} }
func (m *ClientTypeRequest) String() string { return proto.CompactTextString(m) }
func (*ClientTypeRequest) ProtoMessage()    {}
func (*ClientTypeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{1}
}
func (m *ClientTypeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientTypeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientTypeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientTypeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientTypeRequest.Merge(m, src)
}
func (m *ClientTypeRequest) XXX_Size() int {
	return m.Size()
}
func (m *ClientTypeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientTypeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClientTypeRequest proto.InternalMessageInfo

func (m *ClientTypeRequest) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

type ClientTypeResponse struct {
	ClientType string `protobuf:"bytes,1,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"`
}

func (m *ClientTypeResponse) Reset()         { *m = ClientTypeResponse{} }
func (m *ClientTypeResponse) String() string { return proto.CompactTextString(m) }
func (*ClientTypeResponse) ProtoMessage()    {}
func (*ClientTypeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{2}
}
func (m *ClientTypeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientTypeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientTypeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientTypeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientTypeResponse.Merge(m, src)
}
func (m *ClientTypeResponse) XXX_Size() int {
	return m.Size()
}
func (m *ClientTypeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientTypeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ClientTypeResponse proto.InternalMessageInfo

func (m *ClientTypeResponse) GetClientType() string {
	if m != nil {
		return m.ClientType
	}
	return ""
}

// rpc GetLatestHeight
type GetLatestHeightRequest struct {
	State *State `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *GetLatestHeightRequest) Reset()         { *m = GetLatestHeightRequest{} }
func (m *GetLatestHeightRequest) String() string { return proto.CompactTextString(m) }
func (*GetLatestHeightRequest) ProtoMessage()    {}
func (*GetLatestHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{3}
}
func (m *GetLatestHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLatestHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLatestHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLatestHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLatestHeightRequest.Merge(m, src)
}
func (m *GetLatestHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetLatestHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLatestHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetLatestHeightRequest proto.InternalMessageInfo

func (m *GetLatestHeightRequest) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

type GetLatestHeightResponse struct {
	Height *types1.Height `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *GetLatestHeightResponse) Reset()         { *m = GetLatestHeightResponse{} }
func (m *GetLatestHeightResponse) String() string { return proto.CompactTextString(m) }
func (*GetLatestHeightResponse) ProtoMessage()    {}
func (*GetLatestHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{4}
}
func (m *GetLatestHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLatestHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLatestHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLatestHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLatestHeightResponse.Merge(m, src)
}
func (m *GetLatestHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetLatestHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLatestHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetLatestHeightResponse proto.InternalMessageInfo

func (m *GetLatestHeightResponse) GetHeight() *types1.Height {
	if m != nil {
		return m.Height
	}
	return nil
}

// rpc Validate
type ValidateRequest struct {
	State *State `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *ValidateRequest) Reset()         { *m = ValidateRequest{} }
func (m *ValidateRequest) String() string { return proto.CompactTextString(m) }
func (*ValidateRequest) ProtoMessage()    {}
func (*ValidateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{5}
}
func (m *ValidateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateRequest.Merge(m, src)
}
func (m *ValidateRequest) XXX_Size() int {
	return m.Size()
}
func (m *ValidateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateRequest proto.InternalMessageInfo

func (m *ValidateRequest) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

// rpc GetProofSpecs
type GetProofSpecsRequest struct {
	State *State `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *GetProofSpecsRequest) Reset()         { *m = GetProofSpecsRequest{} }
func (m *GetProofSpecsRequest) String() string { return proto.CompactTextString(m) }
func (*GetProofSpecsRequest) ProtoMessage()    {}
func (*GetProofSpecsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{6}
}
func (m *GetProofSpecsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetProofSpecsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetProofSpecsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetProofSpecsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProofSpecsRequest.Merge(m, src)
}
func (m *GetProofSpecsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetProofSpecsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProofSpecsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetProofSpecsRequest proto.InternalMessageInfo

func (m *GetProofSpecsRequest) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

type GetProofSpecsResponse struct {
	ProofSpecs []*_go.ProofSpec `protobuf:"bytes,1,rep,name=proof_specs,json=proofSpecs,proto3" json:"proof_specs,omitempty"`
}

func (m *GetProofSpecsResponse) Reset()         { *m = GetProofSpecsResponse{} }
func (m *GetProofSpecsResponse) String() string { return proto.CompactTextString(m) }
func (*GetProofSpecsResponse) ProtoMessage()    {}
func (*GetProofSpecsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{7}
}
func (m *GetProofSpecsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetProofSpecsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetProofSpecsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetProofSpecsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProofSpecsResponse.Merge(m, src)
}
func (m *GetProofSpecsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetProofSpecsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProofSpecsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetProofSpecsResponse proto.InternalMessageInfo

func (m *GetProofSpecsResponse) GetProofSpecs() []*_go.ProofSpec {
	if m != nil {
		return m.ProofSpecs
	}
	return nil
}

// rpc Initialize
type InitializeRequest struct {
	State          *State                `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	ConsensusState *types.ConsensusState `protobuf:"bytes,2,opt,name=consensus_state,json=consensusState,proto3" json:"consensus_state,omitempty"`
}

func (m *InitializeRequest) Reset()         { *m = InitializeRequest{} }
func (m *InitializeRequest) String() string { return proto.CompactTextString(m) }
func (*InitializeRequest) ProtoMessage()    {}
func (*InitializeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{8}
}
func (m *InitializeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitializeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitializeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitializeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitializeRequest.Merge(m, src)
}
func (m *InitializeRequest) XXX_Size() int {
	return m.Size()
}
func (m *InitializeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InitializeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InitializeRequest proto.InternalMessageInfo

func (m *InitializeRequest) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *InitializeRequest) GetConsensusState() *types.ConsensusState {
	if m != nil {
		return m.ConsensusState
	}
	return nil
}

type InitializeResponse struct {
	State *State `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *InitializeResponse) Reset()         { *m = InitializeResponse{} }
func (m *InitializeResponse) String() string { return proto.CompactTextString(m) }
func (*InitializeResponse) ProtoMessage()    {}
func (*InitializeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{9}
}
func (m *InitializeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitializeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitializeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitializeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitializeResponse.Merge(m, src)
}
func (m *InitializeResponse) XXX_Size() int {
	return m.Size()
}
func (m *InitializeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InitializeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InitializeResponse proto.InternalMessageInfo

func (m *InitializeResponse) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

// rpc Status
type StatusRequest struct {
	State *State `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *StatusRequest) Reset()         { *m = StatusRequest{} }
func (m *StatusRequest) String() string { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()    {}
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{10}
}
func (m *StatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusRequest.Merge(m, src)
}
func (m *StatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *StatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StatusRequest proto.InternalMessageInfo

func (m *StatusRequest) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

type StatusResponse struct {
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *StatusResponse) Reset()         { *m = StatusResponse{} }
func (m *StatusResponse) String() string { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()    {}
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{11}
}
func (m *StatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusResponse.Merge(m, src)
}
func (m *StatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *StatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StatusResponse proto.InternalMessageInfo

func (m *StatusResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

// rpc ExportMetadata
type ExportMetadataRequest struct {
	State *State `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *ExportMetadataRequest) Reset()         { *m = ExportMetadataRequest{} }
func (m *ExportMetadataRequest) String() string { return proto.CompactTextString(m) }
func (*ExportMetadataRequest) ProtoMessage()    {}
func (*ExportMetadataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{12}
}
func (m *ExportMetadataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExportMetadataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExportMetadataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExportMetadataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExportMetadataRequest.Merge(m, src)
}
func (m *ExportMetadataRequest) XXX_Size() int {
	return m.Size()
}
func (m *ExportMetadataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExportMetadataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExportMetadataRequest proto.InternalMessageInfo

func (m *ExportMetadataRequest) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

type ExportMetadataResponse struct {
	GenesisMetadatas []*types1.GenesisMetadata `protobuf:"bytes,1,rep,name=genesis_metadatas,json=genesisMetadatas,proto3" json:"genesis_metadatas,omitempty"`
}

func (m *ExportMetadataResponse) Reset()         { *m = ExportMetadataResponse{} }
func (m *ExportMetadataResponse) String() string { return proto.CompactTextString(m) }
func (*ExportMetadataResponse) ProtoMessage()    {}
func (*ExportMetadataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{13}
}
func (m *ExportMetadataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExportMetadataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExportMetadataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExportMetadataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExportMetadataResponse.Merge(m, src)
}
func (m *ExportMetadataResponse) XXX_Size() int {
	return m.Size()
}
func (m *ExportMetadataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExportMetadataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExportMetadataResponse proto.InternalMessageInfo

func (m *ExportMetadataResponse) GetGenesisMetadatas() []*types1.GenesisMetadata {
	if m != nil {
		return m.GenesisMetadatas
	}
	return nil
}

// rpc CheckHeaderAndUpdateState
type CheckHeaderAndUpdateStateRequest struct {
	State  *State        `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Header *types.Header `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
}

func (m *CheckHeaderAndUpdateStateRequest) Reset()         { *m = CheckHeaderAndUpdateStateRequest{} }
func (m *CheckHeaderAndUpdateStateRequest) String() string { return proto.CompactTextString(m) }
func (*CheckHeaderAndUpdateStateRequest) ProtoMessage()    {}
func (*CheckHeaderAndUpdateStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{14}
}
func (m *CheckHeaderAndUpdateStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckHeaderAndUpdateStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckHeaderAndUpdateStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckHeaderAndUpdateStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckHeaderAndUpdateStateRequest.Merge(m, src)
}
func (m *CheckHeaderAndUpdateStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *CheckHeaderAndUpdateStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckHeaderAndUpdateStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckHeaderAndUpdateStateRequest proto.InternalMessageInfo

func (m *CheckHeaderAndUpdateStateRequest) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *CheckHeaderAndUpdateStateRequest) GetHeader() *types.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

type CheckHeaderAndUpdateStateResponse struct {
	State *State `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *CheckHeaderAndUpdateStateResponse) Reset()         { *m = CheckHeaderAndUpdateStateResponse{} }
func (m *CheckHeaderAndUpdateStateResponse) String() string { return proto.CompactTextString(m) }
func (*CheckHeaderAndUpdateStateResponse) ProtoMessage()    {}
func (*CheckHeaderAndUpdateStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{15}
}
func (m *CheckHeaderAndUpdateStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckHeaderAndUpdateStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckHeaderAndUpdateStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckHeaderAndUpdateStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckHeaderAndUpdateStateResponse.Merge(m, src)
}
func (m *CheckHeaderAndUpdateStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *CheckHeaderAndUpdateStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckHeaderAndUpdateStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckHeaderAndUpdateStateResponse proto.InternalMessageInfo

func (m *CheckHeaderAndUpdateStateResponse) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

// rpc VerifyUpgradeAndUpdateState
type VerifyUpgradeAndUpdateStateRequest struct {
	State                 *State                `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	NewClient             *types.ClientState    `protobuf:"bytes,2,opt,name=new_client,json=newClient,proto3" json:"new_client,omitempty"`
	NewConsState          *types.ConsensusState `protobuf:"bytes,3,opt,name=new_cons_state,json=newConsState,proto3" json:"new_cons_state,omitempty"`
	ProofUpgradeClient    []byte                `protobuf:"bytes,4,opt,name=proof_upgrade_client,json=proofUpgradeClient,proto3" json:"proof_upgrade_client,omitempty"`
	ProofUpgradeConsState []byte                `protobuf:"bytes,5,opt,name=proof_upgrade_cons_state,json=proofUpgradeConsState,proto3" json:"proof_upgrade_cons_state,omitempty"`
}

func (m *VerifyUpgradeAndUpdateStateRequest) Reset()         { *m = VerifyUpgradeAndUpdateStateRequest{} }
func (m *VerifyUpgradeAndUpdateStateRequest) String() string { return proto.CompactTextString(m) }
func (*VerifyUpgradeAndUpdateStateRequest) ProtoMessage()    {}
func (*VerifyUpgradeAndUpdateStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{16}
}
func (m *VerifyUpgradeAndUpdateStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyUpgradeAndUpdateStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyUpgradeAndUpdateStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyUpgradeAndUpdateStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyUpgradeAndUpdateStateRequest.Merge(m, src)
}
func (m *VerifyUpgradeAndUpdateStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *VerifyUpgradeAndUpdateStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyUpgradeAndUpdateStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyUpgradeAndUpdateStateRequest proto.InternalMessageInfo

func (m *VerifyUpgradeAndUpdateStateRequest) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *VerifyUpgradeAndUpdateStateRequest) GetNewClient() *types.ClientState {
	if m != nil {
		return m.NewClient
	}
	return nil
}

func (m *VerifyUpgradeAndUpdateStateRequest) GetNewConsState() *types.ConsensusState {
	if m != nil {
		return m.NewConsState
	}
	return nil
}

func (m *VerifyUpgradeAndUpdateStateRequest) GetProofUpgradeClient() []byte {
	if m != nil {
		return m.ProofUpgradeClient
	}
	return nil
}

func (m *VerifyUpgradeAndUpdateStateRequest) GetProofUpgradeConsState() []byte {
	if m != nil {
		return m.ProofUpgradeConsState
	}
	return nil
}

type VerifyUpgradeAndUpdateStateResponse struct {
	State *State `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *VerifyUpgradeAndUpdateStateResponse) Reset()         { *m = VerifyUpgradeAndUpdateStateResponse{} }
func (m *VerifyUpgradeAndUpdateStateResponse) String() string { return proto.CompactTextString(m) }
func (*VerifyUpgradeAndUpdateStateResponse) ProtoMessage()    {}
func (*VerifyUpgradeAndUpdateStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{17}
}
func (m *VerifyUpgradeAndUpdateStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyUpgradeAndUpdateStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyUpgradeAndUpdateStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyUpgradeAndUpdateStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyUpgradeAndUpdateStateResponse.Merge(m, src)
}
func (m *VerifyUpgradeAndUpdateStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *VerifyUpgradeAndUpdateStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyUpgradeAndUpdateStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyUpgradeAndUpdateStateResponse proto.InternalMessageInfo

func (m *VerifyUpgradeAndUpdateStateResponse) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

// rpc ZeroCustomFields
type ZeroCustomFieldsRequest struct {
	State *State `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *ZeroCustomFieldsRequest) Reset()         { *m = ZeroCustomFieldsRequest{} }
func (m *ZeroCustomFieldsRequest) String() string { return proto.CompactTextString(m) }
func (*ZeroCustomFieldsRequest) ProtoMessage()    {}
func (*ZeroCustomFieldsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{18}
}
func (m *ZeroCustomFieldsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZeroCustomFieldsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ZeroCustomFieldsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ZeroCustomFieldsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZeroCustomFieldsRequest.Merge(m, src)
}
func (m *ZeroCustomFieldsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ZeroCustomFieldsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ZeroCustomFieldsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ZeroCustomFieldsRequest proto.InternalMessageInfo

func (m *ZeroCustomFieldsRequest) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

type ZeroCustomFieldsResponse struct {
	ClientState *types.ClientState `protobuf:"bytes,1,opt,name=client_state,json=clientState,proto3" json:"client_state,omitempty"`
}

func (m *ZeroCustomFieldsResponse) Reset()         { *m = ZeroCustomFieldsResponse{} }
func (m *ZeroCustomFieldsResponse) String() string { return proto.CompactTextString(m) }
func (*ZeroCustomFieldsResponse) ProtoMessage()    {}
func (*ZeroCustomFieldsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{19}
}
func (m *ZeroCustomFieldsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZeroCustomFieldsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ZeroCustomFieldsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ZeroCustomFieldsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZeroCustomFieldsResponse.Merge(m, src)
}
func (m *ZeroCustomFieldsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ZeroCustomFieldsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ZeroCustomFieldsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ZeroCustomFieldsResponse proto.InternalMessageInfo

func (m *ZeroCustomFieldsResponse) GetClientState() *types.ClientState {
	if m != nil {
		return m.ClientState
	}
	return nil
}

// rpc VerifyClientState
type VerifyClientStateRequest struct {
	State                        *State               `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Height                       *types1.Height       `protobuf:"bytes,2,opt,name=height,proto3" json:"height,omitempty"`
	Prefix                       *types2.MerklePrefix `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
	CounterpartyClientIdentifier string               `protobuf:"bytes,4,opt,name=counterparty_client_identifier,json=counterpartyClientIdentifier,proto3" json:"counterparty_client_identifier,omitempty"`
	Proof                        []byte               `protobuf:"bytes,5,opt,name=proof,proto3" json:"proof,omitempty"`
	ClientState                  *types3.Any          `protobuf:"bytes,6,opt,name=client_state,json=clientState,proto3" json:"client_state,omitempty"`
}

func (m *VerifyClientStateRequest) Reset()         { *m = VerifyClientStateRequest{} }
func (m *VerifyClientStateRequest) String() string { return proto.CompactTextString(m) }
func (*VerifyClientStateRequest) ProtoMessage()    {}
func (*VerifyClientStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{20}
}
func (m *VerifyClientStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyClientStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyClientStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyClientStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyClientStateRequest.Merge(m, src)
}
func (m *VerifyClientStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *VerifyClientStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyClientStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyClientStateRequest proto.InternalMessageInfo

func (m *VerifyClientStateRequest) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *VerifyClientStateRequest) GetHeight() *types1.Height {
	if m != nil {
		return m.Height
	}
	return nil
}

func (m *VerifyClientStateRequest) GetPrefix() *types2.MerklePrefix {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *VerifyClientStateRequest) GetCounterpartyClientIdentifier() string {
	if m != nil {
		return m.CounterpartyClientIdentifier
	}
	return ""
}

func (m *VerifyClientStateRequest) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *VerifyClientStateRequest) GetClientState() *types3.Any {
	if m != nil {
		return m.ClientState
	}
	return nil
}

// rpc VerifyClientConsensusState
type VerifyClientConsensusStateRequest struct {
	State                        *State               `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Height                       *types1.Height       `protobuf:"bytes,2,opt,name=height,proto3" json:"height,omitempty"`
	CounterpartyClientIdentifier string               `protobuf:"bytes,3,opt,name=counterparty_client_identifier,json=counterpartyClientIdentifier,proto3" json:"counterparty_client_identifier,omitempty"`
	ConsensusHeight              *types1.Height       `protobuf:"bytes,4,opt,name=consensus_height,json=consensusHeight,proto3" json:"consensus_height,omitempty"`
	Prefix                       *types2.MerklePrefix `protobuf:"bytes,5,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Proof                        []byte               `protobuf:"bytes,6,opt,name=proof,proto3" json:"proof,omitempty"`
	ConsensusState               *types3.Any          `protobuf:"bytes,7,opt,name=consensus_state,json=consensusState,proto3" json:"consensus_state,omitempty"`
}

func (m *VerifyClientConsensusStateRequest) Reset()         { *m = VerifyClientConsensusStateRequest{} }
func (m *VerifyClientConsensusStateRequest) String() string { return proto.CompactTextString(m) }
func (*VerifyClientConsensusStateRequest) ProtoMessage()    {}
func (*VerifyClientConsensusStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{21}
}
func (m *VerifyClientConsensusStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyClientConsensusStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyClientConsensusStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyClientConsensusStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyClientConsensusStateRequest.Merge(m, src)
}
func (m *VerifyClientConsensusStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *VerifyClientConsensusStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyClientConsensusStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyClientConsensusStateRequest proto.InternalMessageInfo

func (m *VerifyClientConsensusStateRequest) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *VerifyClientConsensusStateRequest) GetHeight() *types1.Height {
	if m != nil {
		return m.Height
	}
	return nil
}

func (m *VerifyClientConsensusStateRequest) GetCounterpartyClientIdentifier() string {
	if m != nil {
		return m.CounterpartyClientIdentifier
	}
	return ""
}

func (m *VerifyClientConsensusStateRequest) GetConsensusHeight() *types1.Height {
	if m != nil {
		return m.ConsensusHeight
	}
	return nil
}

func (m *VerifyClientConsensusStateRequest) GetPrefix() *types2.MerklePrefix {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *VerifyClientConsensusStateRequest) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *VerifyClientConsensusStateRequest) GetConsensusState() *types3.Any {
	if m != nil {
		return m.ConsensusState
	}
	return nil
}

// rpc VerifyConnectionState
type VerifyConnectionStateRequest struct {
	State         *State                `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Height        *types1.Height        `protobuf:"bytes,2,opt,name=height,proto3" json:"height,omitempty"`
	Prefix        *types2.MerklePrefix  `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Proof         []byte                `protobuf:"bytes,4,opt,name=proof,proto3" json:"proof,omitempty"`
	ConnectionId  string                `protobuf:"bytes,5,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	ConnectionEnd *types4.ConnectionEnd `protobuf:"bytes,6,opt,name=connection_end,json=connectionEnd,proto3" json:"connection_end,omitempty"`
}

func (m *VerifyConnectionStateRequest) Reset()         { *m = VerifyConnectionStateRequest{} }
func (m *VerifyConnectionStateRequest) String() string { return proto.CompactTextString(m) }
func (*VerifyConnectionStateRequest) ProtoMessage()    {}
func (*VerifyConnectionStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{22}
}
func (m *VerifyConnectionStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyConnectionStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyConnectionStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyConnectionStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyConnectionStateRequest.Merge(m, src)
}
func (m *VerifyConnectionStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *VerifyConnectionStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyConnectionStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyConnectionStateRequest proto.InternalMessageInfo

func (m *VerifyConnectionStateRequest) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *VerifyConnectionStateRequest) GetHeight() *types1.Height {
	if m != nil {
		return m.Height
	}
	return nil
}

func (m *VerifyConnectionStateRequest) GetPrefix() *types2.MerklePrefix {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *VerifyConnectionStateRequest) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *VerifyConnectionStateRequest) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

func (m *VerifyConnectionStateRequest) GetConnectionEnd() *types4.ConnectionEnd {
	if m != nil {
		return m.ConnectionEnd
	}
	return nil
}

// rpc VerifyChannelState
type VerifyChannelStateRequest struct {
	State     *State               `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Height    *types1.Height       `protobuf:"bytes,2,opt,name=height,proto3" json:"height,omitempty"`
	Prefix    *types2.MerklePrefix `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Proof     []byte               `protobuf:"bytes,4,opt,name=proof,proto3" json:"proof,omitempty"`
	PortId    string               `protobuf:"bytes,5,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	ChannelId string               `protobuf:"bytes,6,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Channel   *types5.Channel      `protobuf:"bytes,7,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (m *VerifyChannelStateRequest) Reset()         { *m = VerifyChannelStateRequest{} }
func (m *VerifyChannelStateRequest) String() string { return proto.CompactTextString(m) }
func (*VerifyChannelStateRequest) ProtoMessage()    {}
func (*VerifyChannelStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{23}
}
func (m *VerifyChannelStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyChannelStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyChannelStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyChannelStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyChannelStateRequest.Merge(m, src)
}
func (m *VerifyChannelStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *VerifyChannelStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyChannelStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyChannelStateRequest proto.InternalMessageInfo

func (m *VerifyChannelStateRequest) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *VerifyChannelStateRequest) GetHeight() *types1.Height {
	if m != nil {
		return m.Height
	}
	return nil
}

func (m *VerifyChannelStateRequest) GetPrefix() *types2.MerklePrefix {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *VerifyChannelStateRequest) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *VerifyChannelStateRequest) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

func (m *VerifyChannelStateRequest) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *VerifyChannelStateRequest) GetChannel() *types5.Channel {
	if m != nil {
		return m.Channel
	}
	return nil
}

// rpc VerifyPacketCommitment
type VerifyPacketCommitmentRequest struct {
	State            *State               `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Height           *types1.Height       `protobuf:"bytes,2,opt,name=height,proto3" json:"height,omitempty"`
	DelayTimePeriod  uint64               `protobuf:"varint,3,opt,name=delay_time_period,json=delayTimePeriod,proto3" json:"delay_time_period,omitempty"`
	DelayBlockPeriod uint64               `protobuf:"varint,4,opt,name=delay_block_period,json=delayBlockPeriod,proto3" json:"delay_block_period,omitempty"`
	Prefix           *types2.MerklePrefix `protobuf:"bytes,5,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Proof            []byte               `protobuf:"bytes,6,opt,name=proof,proto3" json:"proof,omitempty"`
	PortId           string               `protobuf:"bytes,7,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	ChannelId        string               `protobuf:"bytes,8,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Sequence         uint64               `protobuf:"varint,9,opt,name=sequence,proto3" json:"sequence,omitempty"`
	CommitmentBytes  []byte               `protobuf:"bytes,10,opt,name=commitment_bytes,json=commitmentBytes,proto3" json:"commitment_bytes,omitempty"`
}

func (m *VerifyPacketCommitmentRequest) Reset()         { *m = VerifyPacketCommitmentRequest{} }
func (m *VerifyPacketCommitmentRequest) String() string { return proto.CompactTextString(m) }
func (*VerifyPacketCommitmentRequest) ProtoMessage()    {}
func (*VerifyPacketCommitmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{24}
}
func (m *VerifyPacketCommitmentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyPacketCommitmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyPacketCommitmentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyPacketCommitmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyPacketCommitmentRequest.Merge(m, src)
}
func (m *VerifyPacketCommitmentRequest) XXX_Size() int {
	return m.Size()
}
func (m *VerifyPacketCommitmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyPacketCommitmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyPacketCommitmentRequest proto.InternalMessageInfo

func (m *VerifyPacketCommitmentRequest) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *VerifyPacketCommitmentRequest) GetHeight() *types1.Height {
	if m != nil {
		return m.Height
	}
	return nil
}

func (m *VerifyPacketCommitmentRequest) GetDelayTimePeriod() uint64 {
	if m != nil {
		return m.DelayTimePeriod
	}
	return 0
}

func (m *VerifyPacketCommitmentRequest) GetDelayBlockPeriod() uint64 {
	if m != nil {
		return m.DelayBlockPeriod
	}
	return 0
}

func (m *VerifyPacketCommitmentRequest) GetPrefix() *types2.MerklePrefix {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *VerifyPacketCommitmentRequest) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *VerifyPacketCommitmentRequest) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

func (m *VerifyPacketCommitmentRequest) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *VerifyPacketCommitmentRequest) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *VerifyPacketCommitmentRequest) GetCommitmentBytes() []byte {
	if m != nil {
		return m.CommitmentBytes
	}
	return nil
}

// rpc VerifyPacketAcknowledgement
type VerifyPacketAcknowledgementRequest struct {
	State            *State               `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Height           *types1.Height       `protobuf:"bytes,2,opt,name=height,proto3" json:"height,omitempty"`
	DelayTimePeriod  uint64               `protobuf:"varint,3,opt,name=delay_time_period,json=delayTimePeriod,proto3" json:"delay_time_period,omitempty"`
	DelayBlockPeriod uint64               `protobuf:"varint,4,opt,name=delay_block_period,json=delayBlockPeriod,proto3" json:"delay_block_period,omitempty"`
	Prefix           *types2.MerklePrefix `protobuf:"bytes,5,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Proof            []byte               `protobuf:"bytes,6,opt,name=proof,proto3" json:"proof,omitempty"`
	PortId           string               `protobuf:"bytes,7,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	ChannelId        string               `protobuf:"bytes,8,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Sequence         uint64               `protobuf:"varint,9,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Acknowledgement  []byte               `protobuf:"bytes,10,opt,name=acknowledgement,proto3" json:"acknowledgement,omitempty"`
}

func (m *VerifyPacketAcknowledgementRequest) Reset()         { *m = VerifyPacketAcknowledgementRequest{} }
func (m *VerifyPacketAcknowledgementRequest) String() string { return proto.CompactTextString(m) }
func (*VerifyPacketAcknowledgementRequest) ProtoMessage()    {}
func (*VerifyPacketAcknowledgementRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{25}
}
func (m *VerifyPacketAcknowledgementRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyPacketAcknowledgementRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyPacketAcknowledgementRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyPacketAcknowledgementRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyPacketAcknowledgementRequest.Merge(m, src)
}
func (m *VerifyPacketAcknowledgementRequest) XXX_Size() int {
	return m.Size()
}
func (m *VerifyPacketAcknowledgementRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyPacketAcknowledgementRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyPacketAcknowledgementRequest proto.InternalMessageInfo

func (m *VerifyPacketAcknowledgementRequest) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *VerifyPacketAcknowledgementRequest) GetHeight() *types1.Height {
	if m != nil {
		return m.Height
	}
	return nil
}

func (m *VerifyPacketAcknowledgementRequest) GetDelayTimePeriod() uint64 {
	if m != nil {
		return m.DelayTimePeriod
	}
	return 0
}

func (m *VerifyPacketAcknowledgementRequest) GetDelayBlockPeriod() uint64 {
	if m != nil {
		return m.DelayBlockPeriod
	}
	return 0
}

func (m *VerifyPacketAcknowledgementRequest) GetPrefix() *types2.MerklePrefix {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *VerifyPacketAcknowledgementRequest) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *VerifyPacketAcknowledgementRequest) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

func (m *VerifyPacketAcknowledgementRequest) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *VerifyPacketAcknowledgementRequest) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *VerifyPacketAcknowledgementRequest) GetAcknowledgement() []byte {
	if m != nil {
		return m.Acknowledgement
	}
	return nil
}

// rpc VerifyPacketReceiptAbsence
type VerifyPacketReceiptAbsenceRequest struct {
	State            *State               `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Height           *types1.Height       `protobuf:"bytes,2,opt,name=height,proto3" json:"height,omitempty"`
	DelayTimePeriod  uint64               `protobuf:"varint,3,opt,name=delay_time_period,json=delayTimePeriod,proto3" json:"delay_time_period,omitempty"`
	DelayBlockPeriod uint64               `protobuf:"varint,4,opt,name=delay_block_period,json=delayBlockPeriod,proto3" json:"delay_block_period,omitempty"`
	Prefix           *types2.MerklePrefix `protobuf:"bytes,5,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Proof            []byte               `protobuf:"bytes,6,opt,name=proof,proto3" json:"proof,omitempty"`
	PortId           string               `protobuf:"bytes,7,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	ChannelId        string               `protobuf:"bytes,8,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Sequence         uint64               `protobuf:"varint,9,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (m *VerifyPacketReceiptAbsenceRequest) Reset()         { *m = VerifyPacketReceiptAbsenceRequest{} }
func (m *VerifyPacketReceiptAbsenceRequest) String() string { return proto.CompactTextString(m) }
func (*VerifyPacketReceiptAbsenceRequest) ProtoMessage()    {}
func (*VerifyPacketReceiptAbsenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{26}
}
func (m *VerifyPacketReceiptAbsenceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyPacketReceiptAbsenceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyPacketReceiptAbsenceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyPacketReceiptAbsenceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyPacketReceiptAbsenceRequest.Merge(m, src)
}
func (m *VerifyPacketReceiptAbsenceRequest) XXX_Size() int {
	return m.Size()
}
func (m *VerifyPacketReceiptAbsenceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyPacketReceiptAbsenceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyPacketReceiptAbsenceRequest proto.InternalMessageInfo

func (m *VerifyPacketReceiptAbsenceRequest) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *VerifyPacketReceiptAbsenceRequest) GetHeight() *types1.Height {
	if m != nil {
		return m.Height
	}
	return nil
}

func (m *VerifyPacketReceiptAbsenceRequest) GetDelayTimePeriod() uint64 {
	if m != nil {
		return m.DelayTimePeriod
	}
	return 0
}

func (m *VerifyPacketReceiptAbsenceRequest) GetDelayBlockPeriod() uint64 {
	if m != nil {
		return m.DelayBlockPeriod
	}
	return 0
}

func (m *VerifyPacketReceiptAbsenceRequest) GetPrefix() *types2.MerklePrefix {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *VerifyPacketReceiptAbsenceRequest) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *VerifyPacketReceiptAbsenceRequest) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

func (m *VerifyPacketReceiptAbsenceRequest) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *VerifyPacketReceiptAbsenceRequest) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

// rpc VerifyNextSequenceRecv
type VerifyNextSequenceRecvRequest struct {
	State            *State               `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Height           *types1.Height       `protobuf:"bytes,2,opt,name=height,proto3" json:"height,omitempty"`
	DelayTimePeriod  uint64               `protobuf:"varint,3,opt,name=delay_time_period,json=delayTimePeriod,proto3" json:"delay_time_period,omitempty"`
	DelayBlockPeriod uint64               `protobuf:"varint,4,opt,name=delay_block_period,json=delayBlockPeriod,proto3" json:"delay_block_period,omitempty"`
	Prefix           *types2.MerklePrefix `protobuf:"bytes,5,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Proof            []byte               `protobuf:"bytes,6,opt,name=proof,proto3" json:"proof,omitempty"`
	PortId           string               `protobuf:"bytes,7,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	ChannelId        string               `protobuf:"bytes,8,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	NextSequenceRecv uint64               `protobuf:"varint,9,opt,name=next_sequence_recv,json=nextSequenceRecv,proto3" json:"next_sequence_recv,omitempty"`
}

func (m *VerifyNextSequenceRecvRequest) Reset()         { *m = VerifyNextSequenceRecvRequest{} }
func (m *VerifyNextSequenceRecvRequest) String() string { return proto.CompactTextString(m) }
func (*VerifyNextSequenceRecvRequest) ProtoMessage()    {}
func (*VerifyNextSequenceRecvRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6967e85c342bf417, []int{27}
}
func (m *VerifyNextSequenceRecvRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyNextSequenceRecvRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyNextSequenceRecvRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyNextSequenceRecvRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyNextSequenceRecvRequest.Merge(m, src)
}
func (m *VerifyNextSequenceRecvRequest) XXX_Size() int {
	return m.Size()
}
func (m *VerifyNextSequenceRecvRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyNextSequenceRecvRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyNextSequenceRecvRequest proto.InternalMessageInfo

func (m *VerifyNextSequenceRecvRequest) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *VerifyNextSequenceRecvRequest) GetHeight() *types1.Height {
	if m != nil {
		return m.Height
	}
	return nil
}

func (m *VerifyNextSequenceRecvRequest) GetDelayTimePeriod() uint64 {
	if m != nil {
		return m.DelayTimePeriod
	}
	return 0
}

func (m *VerifyNextSequenceRecvRequest) GetDelayBlockPeriod() uint64 {
	if m != nil {
		return m.DelayBlockPeriod
	}
	return 0
}

func (m *VerifyNextSequenceRecvRequest) GetPrefix() *types2.MerklePrefix {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *VerifyNextSequenceRecvRequest) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *VerifyNextSequenceRecvRequest) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

func (m *VerifyNextSequenceRecvRequest) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *VerifyNextSequenceRecvRequest) GetNextSequenceRecv() uint64 {
	if m != nil {
		return m.NextSequenceRecv
	}
	return 0
}

func init() {
	proto.RegisterType((*State)(nil), "ibc.lightclientd.fabric.v1.State")
	proto.RegisterMapType((map[uint64]*types.ConsensusState)(nil), "ibc.lightclientd.fabric.v1.State.ConsensusStatesEntry")
	proto.RegisterType((*ClientTypeRequest)(nil), "ibc.lightclientd.fabric.v1.ClientTypeRequest")
	proto.RegisterType((*ClientTypeResponse)(nil), "ibc.lightclientd.fabric.v1.ClientTypeResponse")
	proto.RegisterType((*GetLatestHeightRequest)(nil), "ibc.lightclientd.fabric.v1.GetLatestHeightRequest")
	proto.RegisterType((*GetLatestHeightResponse)(nil), "ibc.lightclientd.fabric.v1.GetLatestHeightResponse")
	proto.RegisterType((*ValidateRequest)(nil), "ibc.lightclientd.fabric.v1.ValidateRequest")
	proto.RegisterType((*GetProofSpecsRequest)(nil), "ibc.lightclientd.fabric.v1.GetProofSpecsRequest")
	proto.RegisterType((*GetProofSpecsResponse)(nil), "ibc.lightclientd.fabric.v1.GetProofSpecsResponse")
	proto.RegisterType((*InitializeRequest)(nil), "ibc.lightclientd.fabric.v1.InitializeRequest")
	proto.RegisterType((*InitializeResponse)(nil), "ibc.lightclientd.fabric.v1.InitializeResponse")
	proto.RegisterType((*StatusRequest)(nil), "ibc.lightclientd.fabric.v1.StatusRequest")
	proto.RegisterType((*StatusResponse)(nil), "ibc.lightclientd.fabric.v1.StatusResponse")
	proto.RegisterType((*ExportMetadataRequest)(nil), "ibc.lightclientd.fabric.v1.ExportMetadataRequest")
	proto.RegisterType((*ExportMetadataResponse)(nil), "ibc.lightclientd.fabric.v1.ExportMetadataResponse")
	proto.RegisterType((*CheckHeaderAndUpdateStateRequest)(nil), "ibc.lightclientd.fabric.v1.CheckHeaderAndUpdateStateRequest")
	proto.RegisterType((*CheckHeaderAndUpdateStateResponse)(nil), "ibc.lightclientd.fabric.v1.CheckHeaderAndUpdateStateResponse")
	proto.RegisterType((*VerifyUpgradeAndUpdateStateRequest)(nil), "ibc.lightclientd.fabric.v1.VerifyUpgradeAndUpdateStateRequest")
	proto.RegisterType((*VerifyUpgradeAndUpdateStateResponse)(nil), "ibc.lightclientd.fabric.v1.VerifyUpgradeAndUpdateStateResponse")
	proto.RegisterType((*ZeroCustomFieldsRequest)(nil), "ibc.lightclientd.fabric.v1.ZeroCustomFieldsRequest")
	proto.RegisterType((*ZeroCustomFieldsResponse)(nil), "ibc.lightclientd.fabric.v1.ZeroCustomFieldsResponse")
	proto.RegisterType((*VerifyClientStateRequest)(nil), "ibc.lightclientd.fabric.v1.VerifyClientStateRequest")
	proto.RegisterType((*VerifyClientConsensusStateRequest)(nil), "ibc.lightclientd.fabric.v1.VerifyClientConsensusStateRequest")
	proto.RegisterType((*VerifyConnectionStateRequest)(nil), "ibc.lightclientd.fabric.v1.VerifyConnectionStateRequest")
	proto.RegisterType((*VerifyChannelStateRequest)(nil), "ibc.lightclientd.fabric.v1.VerifyChannelStateRequest")
	proto.RegisterType((*VerifyPacketCommitmentRequest)(nil), "ibc.lightclientd.fabric.v1.VerifyPacketCommitmentRequest")
	proto.RegisterType((*VerifyPacketAcknowledgementRequest)(nil), "ibc.lightclientd.fabric.v1.VerifyPacketAcknowledgementRequest")
	proto.RegisterType((*VerifyPacketReceiptAbsenceRequest)(nil), "ibc.lightclientd.fabric.v1.VerifyPacketReceiptAbsenceRequest")
	proto.RegisterType((*VerifyNextSequenceRecvRequest)(nil), "ibc.lightclientd.fabric.v1.VerifyNextSequenceRecvRequest")
}

func init() {
	proto.RegisterFile("ibc/lightclientd/fabric/v1/fabric.proto", fileDescriptor_6967e85c342bf417)
}

var fileDescriptor_6967e85c342bf417 = []byte{
	// 1655 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x19, 0x5d, 0x6f, 0xdb, 0x54,
	0x74, 0x49, 0xda, 0x74, 0x3d, 0xed, 0xda, 0xf4, 0xd2, 0x76, 0x99, 0xb7, 0x75, 0xad, 0x07, 0x5a,
	0x37, 0x36, 0x67, 0xed, 0x3e, 0x99, 0x36, 0xa0, 0x2b, 0xdd, 0xda, 0xa9, 0x65, 0xc5, 0xdd, 0xf6,
	0x30, 0x21, 0x22, 0xc7, 0xbe, 0x49, 0x2f, 0x49, 0x6c, 0x63, 0xdf, 0xb4, 0xcd, 0x24, 0xfe, 0x03,
	0xe2, 0x05, 0x9e, 0x10, 0xfc, 0x00, 0x24, 0x9e, 0x90, 0x78, 0xe0, 0x9d, 0x07, 0x1e, 0x26, 0x9e,
	0x10, 0x4f, 0xa8, 0xfb, 0x23, 0xc8, 0xf7, 0x5e, 0x3b, 0x8e, 0x93, 0x38, 0x69, 0xc3, 0x54, 0x81,
	0xf6, 0xe6, 0x73, 0xef, 0xf9, 0xfe, 0xb0, 0xcf, 0x39, 0x86, 0x0b, 0xa4, 0xa0, 0xe7, 0x2a, 0xa4,
	0xb4, 0x4d, 0xf5, 0x0a, 0xc1, 0x26, 0x35, 0x72, 0x45, 0xad, 0xe0, 0x10, 0x3d, 0xb7, 0xb3, 0x20,
	0x9e, 0x14, 0xdb, 0xb1, 0xa8, 0x85, 0x24, 0x52, 0xd0, 0x95, 0x30, 0xa2, 0x22, 0xae, 0x77, 0x16,
	0xa4, 0x73, 0x1e, 0x13, 0xdd, 0x72, 0x70, 0x8e, 0xdf, 0x79, 0xc4, 0xfc, 0x89, 0x13, 0x4b, 0xb3,
	0x6d, 0x10, 0x4a, 0xd8, 0xc4, 0x2e, 0x71, 0x05, 0xc6, 0x85, 0x06, 0x86, 0x65, 0x9a, 0x58, 0xa7,
	0xc4, 0x32, 0x19, 0x9b, 0x00, 0x12, 0x88, 0x73, 0x0d, 0xc4, 0x6d, 0xcd, 0x34, 0x71, 0x85, 0x61,
	0xf1, 0xc7, 0x36, 0xbc, 0xaa, 0x55, 0x42, 0xab, 0xbe, 0x4a, 0x01, 0x14, 0x46, 0x0c, 0xd9, 0xe4,
	0x76, 0x30, 0x5e, 0x7a, 0x4b, 0xb7, 0xcc, 0x22, 0xb1, 0x72, 0xb6, 0x63, 0x59, 0x45, 0x5f, 0xe5,
	0xd3, 0x25, 0xcb, 0x2a, 0x55, 0x70, 0x8e, 0x41, 0x85, 0x5a, 0x31, 0x87, 0xab, 0x36, 0xad, 0x8b,
	0xcb, 0x53, 0xd1, 0x4b, 0xcd, 0x14, 0x57, 0xf2, 0xcf, 0x49, 0x18, 0xdc, 0xa2, 0x1a, 0xc5, 0x68,
	0x0c, 0x92, 0xc4, 0xc8, 0x26, 0x66, 0x13, 0xf3, 0xc3, 0x6a, 0x92, 0x18, 0xe8, 0x11, 0x8c, 0x72,
	0x45, 0xf2, 0xae, 0x77, 0x9f, 0x4d, 0xce, 0x26, 0xe6, 0x47, 0x16, 0x2f, 0x28, 0x11, 0xd7, 0xbb,
	0x0d, 0xd7, 0x2b, 0xcb, 0xec, 0x84, 0xb1, 0x53, 0x47, 0xf4, 0x06, 0x80, 0x34, 0xc8, 0xe8, 0x96,
	0xe9, 0x62, 0xd3, 0xad, 0xb9, 0x9c, 0x9d, 0x9b, 0x4d, 0xcd, 0xa6, 0xe6, 0x47, 0x16, 0x6f, 0x2a,
	0x9d, 0x43, 0xa9, 0x30, 0x62, 0x65, 0xd9, 0xa7, 0x64, 0xa0, 0xbb, 0x62, 0x52, 0xa7, 0xae, 0x8e,
	0xeb, 0xcd, 0xa7, 0x92, 0x09, 0x93, 0xed, 0x10, 0x51, 0x06, 0x52, 0x65, 0x5c, 0x67, 0x76, 0x0d,
	0xa8, 0xde, 0x23, 0xfa, 0x10, 0x06, 0x77, 0xb4, 0x4a, 0xcd, 0xb7, 0xe8, 0x52, 0xac, 0x45, 0x4d,
	0x2c, 0x55, 0x4e, 0x78, 0x27, 0x79, 0x3b, 0x21, 0xaf, 0xc3, 0x04, 0x37, 0xf7, 0x49, 0xdd, 0xc6,
	0x2a, 0xfe, 0xa2, 0x86, 0x5d, 0x8a, 0x6e, 0xc1, 0x20, 0x77, 0x56, 0x82, 0xb1, 0x9e, 0xeb, 0x6a,
	0x9c, 0xca, 0xf1, 0xe5, 0x1b, 0x80, 0xc2, 0xdc, 0x5c, 0xdb, 0x93, 0x8b, 0xce, 0x81, 0xf0, 0x62,
	0x9e, 0xd6, 0x6d, 0x2c, 0x62, 0x03, 0x7a, 0x80, 0x28, 0x7f, 0x02, 0xd3, 0x0f, 0x31, 0x5d, 0xf7,
	0xac, 0xa5, 0xab, 0xd8, 0x93, 0xd3, 0xb7, 0x26, 0x1b, 0x70, 0xb2, 0x85, 0xa5, 0x50, 0x67, 0x11,
	0xd2, 0xdb, 0xec, 0x44, 0x30, 0x95, 0x18, 0x53, 0x2f, 0xb7, 0x15, 0x51, 0x60, 0x3b, 0x0b, 0x8a,
	0xa0, 0x11, 0x98, 0xf2, 0x23, 0x18, 0x7f, 0xa6, 0x55, 0x88, 0xe1, 0x49, 0xe8, 0x57, 0xb5, 0xc7,
	0x30, 0xf9, 0x10, 0xd3, 0x4d, 0x2f, 0xed, 0xb7, 0x6c, 0xac, 0xbb, 0x7d, 0x33, 0x7c, 0x04, 0x53,
	0x11, 0x86, 0xc2, 0xd2, 0x05, 0x18, 0x61, 0xd5, 0x95, 0x77, 0xbd, 0xe3, 0x6c, 0x82, 0xa5, 0x6a,
	0x46, 0x21, 0xba, 0xbb, 0x78, 0x4d, 0x09, 0xf0, 0x55, 0xb0, 0x03, 0x52, 0xf9, 0x87, 0x04, 0x4c,
	0xac, 0x99, 0x84, 0x12, 0xad, 0x42, 0x5e, 0xf4, 0x6d, 0x2b, 0xda, 0x82, 0xf1, 0x48, 0xc5, 0x1c,
	0x22, 0x5d, 0xc7, 0x9a, 0x8b, 0x44, 0xde, 0x00, 0x14, 0x56, 0x51, 0x18, 0x7b, 0x68, 0xf7, 0xad,
	0xc2, 0x09, 0x0f, 0xae, 0xf5, 0x1f, 0x88, 0x79, 0x18, 0xf3, 0x39, 0x09, 0xa5, 0xa6, 0x21, 0xed,
	0xb2, 0x13, 0x91, 0xf5, 0x02, 0x92, 0x37, 0x61, 0x6a, 0x65, 0xcf, 0xb6, 0x1c, 0xba, 0x81, 0xa9,
	0x66, 0x68, 0x54, 0xeb, 0x5b, 0xf6, 0xe7, 0x30, 0x1d, 0xe5, 0x28, 0x74, 0xd8, 0x84, 0x09, 0xf1,
	0x5d, 0xc8, 0x57, 0xc5, 0x9d, 0x9f, 0x0b, 0xe7, 0xdb, 0xa5, 0xfe, 0x43, 0x8e, 0x1c, 0xf0, 0xc9,
	0x94, 0x9a, 0x0f, 0x5c, 0xf9, 0x9b, 0x04, 0xcc, 0x2e, 0x6f, 0x63, 0xbd, 0xbc, 0x8a, 0x35, 0x03,
	0x3b, 0x4b, 0xa6, 0xf1, 0xd4, 0xf6, 0x4a, 0x83, 0x2b, 0xd4, 0x6f, 0xce, 0xdc, 0xf1, 0xea, 0xd3,
	0xe3, 0x2b, 0x52, 0x45, 0x8e, 0x4b, 0x15, 0xae, 0x81, 0x2a, 0x28, 0xe4, 0x4f, 0x61, 0x2e, 0x46,
	0xb1, 0x7e, 0x33, 0x65, 0x3f, 0x09, 0xf2, 0x33, 0xec, 0x90, 0x62, 0xfd, 0xa9, 0x5d, 0x72, 0x34,
	0x03, 0xff, 0xcb, 0x96, 0x3f, 0x00, 0x30, 0xf1, 0x6e, 0x9e, 0x63, 0x1d, 0xf4, 0x4b, 0x35, 0x6c,
	0xe2, 0x5d, 0x0e, 0xa3, 0x4d, 0x18, 0x63, 0x7c, 0x2c, 0xd3, 0x2f, 0xba, 0xd4, 0x81, 0x8b, 0x6e,
	0xd4, 0x63, 0x67, 0x99, 0x1c, 0x42, 0x57, 0x61, 0x92, 0xbf, 0x49, 0x6a, 0xdc, 0x70, 0x5f, 0xc7,
	0x81, 0xd9, 0xc4, 0xfc, 0xa8, 0x8a, 0xd8, 0x9d, 0xf0, 0x89, 0xd0, 0xe1, 0x16, 0x64, 0x23, 0x14,
	0x0d, 0x6d, 0x06, 0x19, 0xd5, 0x54, 0x13, 0x95, 0x2f, 0x4a, 0xfe, 0x0c, 0xce, 0xc7, 0xfa, 0xb8,
	0xdf, 0x20, 0xaa, 0x70, 0xf2, 0x39, 0x76, 0xac, 0xe5, 0x9a, 0x4b, 0xad, 0xea, 0x03, 0x82, 0x2b,
	0x46, 0xff, 0x85, 0x5f, 0x84, 0x6c, 0x2b, 0x4f, 0xa1, 0x68, 0xb4, 0x01, 0x49, 0x1c, 0xbe, 0x01,
	0x91, 0xff, 0x4a, 0x42, 0x96, 0x3b, 0x27, 0x8c, 0xd2, 0x6f, 0xda, 0x35, 0x3e, 0x88, 0xc9, 0x5e,
	0x3f, 0x88, 0xe8, 0x2e, 0xa4, 0x6d, 0x07, 0x17, 0xc9, 0x9e, 0x48, 0xad, 0xb7, 0x43, 0x34, 0x8d,
	0x96, 0x70, 0x67, 0x41, 0xd9, 0xc0, 0x4e, 0xb9, 0x82, 0x37, 0x19, 0xae, 0x2a, 0x68, 0xd0, 0x47,
	0x30, 0xa3, 0x5b, 0x35, 0x93, 0x62, 0xc7, 0xd6, 0x1c, 0x5a, 0x17, 0xd9, 0x94, 0x27, 0x06, 0x36,
	0x29, 0x29, 0x12, 0xec, 0xb0, 0xc4, 0x1a, 0x56, 0xcf, 0x84, 0xb1, 0xb8, 0xc9, 0x6b, 0x01, 0x0e,
	0x9a, 0x84, 0x41, 0x96, 0x42, 0x22, 0x9f, 0x38, 0x80, 0x6e, 0x45, 0xfc, 0x9d, 0x66, 0xfa, 0x4d,
	0x2a, 0xbc, 0x79, 0x54, 0xfc, 0xe6, 0x51, 0x59, 0x32, 0xeb, 0xcd, 0xce, 0xfd, 0x29, 0x05, 0x73,
	0x61, 0xe7, 0x46, 0x0a, 0xe2, 0x28, 0xbc, 0xdc, 0xdd, 0x4f, 0xa9, 0x1e, 0xfc, 0xb4, 0x12, 0x6e,
	0x5b, 0x85, 0x0e, 0x03, 0x5d, 0x75, 0x68, 0x7c, 0xb8, 0x57, 0xa3, 0x21, 0x1f, 0x3c, 0x44, 0xc8,
	0x83, 0x60, 0xa5, 0xc3, 0xc1, 0xba, 0xd7, 0xda, 0x1f, 0x0c, 0xc5, 0xc4, 0x2b, 0xda, 0x09, 0xfc,
	0x91, 0x84, 0x33, 0x22, 0x64, 0xc1, 0x4c, 0xf3, 0x5f, 0xad, 0x89, 0xc0, 0x41, 0x03, 0x61, 0x07,
	0x9d, 0x87, 0x13, 0x8d, 0x71, 0x2d, 0x4f, 0x0c, 0xe6, 0xfb, 0x61, 0x75, 0xb4, 0x71, 0xb8, 0x66,
	0xa0, 0x75, 0x18, 0x0b, 0x21, 0x61, 0xd3, 0x10, 0x49, 0xff, 0x4e, 0x58, 0x81, 0x60, 0xe6, 0xe3,
	0xef, 0x7a, 0x01, 0xad, 0x98, 0x86, 0x1a, 0x92, 0xb0, 0x62, 0x1a, 0xf2, 0xef, 0x49, 0x38, 0x25,
	0x9c, 0xca, 0x47, 0xc0, 0xff, 0x97, 0x47, 0x4f, 0xc2, 0x90, 0xd7, 0x26, 0x35, 0x7c, 0x99, 0xf6,
	0xc0, 0x35, 0x03, 0x9d, 0x05, 0x10, 0x33, 0xaf, 0x77, 0x97, 0x66, 0x77, 0xc3, 0xe2, 0x64, 0xcd,
	0x40, 0x37, 0x61, 0x48, 0x00, 0x22, 0x45, 0xcf, 0x84, 0x94, 0x11, 0xb3, 0xb2, 0xe7, 0x5a, 0xfe,
	0xa8, 0xfa, 0xc8, 0xf2, 0x2f, 0x29, 0x38, 0xcb, 0xdd, 0xb9, 0xa9, 0xe9, 0x65, 0x4c, 0x97, 0x03,
	0xc5, 0x8f, 0xc4, 0xa5, 0x97, 0x60, 0xc2, 0xc0, 0x15, 0xad, 0x9e, 0xa7, 0xa4, 0x8a, 0xf3, 0x36,
	0x76, 0x88, 0x65, 0x30, 0xef, 0x0e, 0xa8, 0xe3, 0xec, 0xe2, 0x09, 0xa9, 0xe2, 0x4d, 0x76, 0x8c,
	0x2e, 0x03, 0xe2, 0xb8, 0x85, 0x8a, 0xa5, 0x97, 0x7d, 0xe4, 0x01, 0x86, 0x9c, 0x61, 0x37, 0xf7,
	0xbd, 0x0b, 0x81, 0xfd, 0x3a, 0xde, 0x0f, 0xa1, 0x60, 0x0d, 0xc5, 0x04, 0xeb, 0x78, 0x34, 0x58,
	0x12, 0x1c, 0x77, 0x3d, 0xef, 0x9a, 0x3a, 0xce, 0x0e, 0x33, 0x7d, 0x03, 0x18, 0x5d, 0xf4, 0x5e,
	0x87, 0xbe, 0x3e, 0xf9, 0x42, 0xdd, 0x9b, 0xe2, 0x81, 0x09, 0x1d, 0x6f, 0x9c, 0xdf, 0xf7, 0x8e,
	0xe5, 0x5f, 0x53, 0x7e, 0xc3, 0xc7, 0x63, 0xb7, 0xa4, 0x97, 0x4d, 0x6b, 0xb7, 0x82, 0x8d, 0x12,
	0x7e, 0x13, 0xc0, 0x23, 0x0b, 0xe0, 0x3c, 0x8c, 0x6b, 0xcd, 0x81, 0xf0, 0xe3, 0x17, 0x39, 0x96,
	0xbf, 0x0e, 0x3e, 0xe9, 0x3c, 0x7e, 0x2a, 0xd6, 0x31, 0xb1, 0xe9, 0x52, 0xc1, 0xf5, 0x18, 0xbd,
	0x09, 0xdf, 0x51, 0x84, 0x4f, 0xfe, 0x3e, 0x78, 0x21, 0x7e, 0x8c, 0xf7, 0xe8, 0x96, 0x38, 0x56,
	0xb1, 0xbe, 0xf3, 0x26, 0x20, 0xaf, 0x2d, 0x20, 0x97, 0x01, 0x99, 0x78, 0x8f, 0xe6, 0xfd, 0x28,
	0xe4, 0x1d, 0xac, 0xef, 0x88, 0xd0, 0x64, 0xcc, 0x48, 0x1c, 0x16, 0x7f, 0xcc, 0xc0, 0xc8, 0xba,
	0xe7, 0x1d, 0x31, 0xcc, 0x95, 0x01, 0x1a, 0x7b, 0x3d, 0x74, 0x25, 0x2e, 0x1e, 0x2d, 0xdb, 0x44,
	0x49, 0xe9, 0x15, 0x5d, 0x0c, 0x4c, 0x2f, 0x60, 0x3c, 0xb2, 0xba, 0x43, 0x8b, 0x71, 0x2c, 0xda,
	0xaf, 0x0e, 0xa5, 0x6b, 0x07, 0xa2, 0x11, 0xb2, 0x1f, 0xc3, 0x71, 0x7f, 0xcf, 0x87, 0xde, 0x8d,
	0x63, 0x10, 0xd9, 0x06, 0x4a, 0xd3, 0x2d, 0xfd, 0xea, 0x4a, 0xd5, 0xa6, 0x75, 0x44, 0xe1, 0x44,
	0xd3, 0x6e, 0x0e, 0x5d, 0xed, 0xa2, 0x56, 0xcb, 0x5e, 0x50, 0x5a, 0x38, 0x00, 0x85, 0x30, 0xa3,
	0x0c, 0xd0, 0xd8, 0x90, 0xc5, 0xc7, 0xab, 0x65, 0xd9, 0x17, 0x1f, 0xaf, 0x36, 0x8b, 0xb7, 0x3c,
	0xa4, 0xf9, 0xd6, 0x0b, 0x5d, 0xec, 0x56, 0xa8, 0xc1, 0x8e, 0x4d, 0xba, 0xd4, 0x0b, 0xaa, 0x10,
	0xb0, 0x0b, 0x63, 0xcd, 0xab, 0x2d, 0x14, 0xeb, 0x92, 0xb6, 0x8b, 0x35, 0x69, 0xf1, 0x20, 0x24,
	0x42, 0xf0, 0xb7, 0x09, 0x38, 0xd5, 0x71, 0x9d, 0x84, 0xee, 0xc6, 0xe6, 0x75, 0x97, 0xf5, 0x98,
	0x74, 0xef, 0x90, 0xd4, 0x42, 0xb5, 0xef, 0x12, 0x70, 0x3a, 0x66, 0x4d, 0x82, 0xde, 0x8f, 0x4d,
	0xde, 0xae, 0x3b, 0x2c, 0xe9, 0x83, 0x43, 0xd3, 0x0b, 0x05, 0xbf, 0x84, 0x4c, 0x74, 0x25, 0x82,
	0x62, 0x4b, 0xb2, 0xc3, 0x52, 0x46, 0xba, 0x7e, 0x30, 0x22, 0x21, 0x5e, 0x83, 0x89, 0x96, 0x45,
	0x09, 0xba, 0xde, 0xdd, 0xa8, 0xd6, 0xbd, 0x4a, 0xc7, 0xd2, 0x76, 0x41, 0xea, 0xbc, 0x2e, 0x40,
	0xf7, 0x7a, 0x95, 0xd5, 0x76, 0xcd, 0xd0, 0x51, 0x28, 0x81, 0xa9, 0xb6, 0x03, 0x2f, 0xba, 0xdd,
	0x83, 0xbc, 0xb6, 0x33, 0x72, 0x47, 0x51, 0x3a, 0xa0, 0xd6, 0x31, 0x10, 0xdd, 0xe8, 0x41, 0x4e,
	0xeb, 0xd8, 0xd8, 0x51, 0x48, 0x19, 0xa6, 0xdb, 0x0f, 0x47, 0xe8, 0xbd, 0xee, 0x82, 0x3a, 0x0c,
	0x54, 0x1d, 0x85, 0xd5, 0xfc, 0x9a, 0x69, 0xdb, 0xcd, 0xf7, 0x52, 0x33, 0x71, 0x63, 0x40, 0xf7,
	0x44, 0x69, 0xd7, 0x84, 0xf6, 0x92, 0x28, 0x31, 0xcd, 0x6b, 0x77, 0xc7, 0x46, 0x9b, 0xac, 0x5e,
	0x1c, 0xdb, 0xa1, 0x31, 0xeb, 0x24, 0xec, 0xfe, 0xe3, 0xdf, 0xf6, 0x67, 0x12, 0x2f, 0xf7, 0x67,
	0x12, 0x7f, 0xef, 0xcf, 0x24, 0xbe, 0x7a, 0x35, 0x73, 0xec, 0xe5, 0xab, 0x99, 0x63, 0x7f, 0xbe,
	0x9a, 0x39, 0xf6, 0xfc, 0x46, 0x89, 0xd0, 0xed, 0x5a, 0xc1, 0x6b, 0x78, 0x72, 0xde, 0xbb, 0x55,
	0xdf, 0xd6, 0x88, 0x59, 0xd1, 0x0a, 0xe2, 0x5f, 0xf0, 0x15, 0x52, 0xd0, 0xaf, 0x34, 0xfd, 0x2a,
	0xa7, 0x75, 0x1b, 0xbb, 0x85, 0x34, 0x13, 0x70, 0xed, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8c,
	0x07, 0x6b, 0x7e, 0x4b, 0x1f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LightClientClient is the client API for LightClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LightClientClient interface {
	ClientType(ctx context.Context, in *ClientTypeRequest, opts ...grpc.CallOption) (*ClientTypeResponse, error)
	GetLatestHeight(ctx context.Context, in *GetLatestHeightRequest, opts ...grpc.CallOption) (*GetLatestHeightResponse, error)
	Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetProofSpecs(ctx context.Context, in *GetProofSpecsRequest, opts ...grpc.CallOption) (*GetProofSpecsResponse, error)
	// Initialization function
	// Clients must validate the initial consensus state, and may store any client-specific metadata
	// necessary for correct light client operation
	Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*InitializeResponse, error)
	// Status function
	// Clients must return their status. Only Active clients are allowed to process packets.
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Genesis function
	ExportMetadata(ctx context.Context, in *ExportMetadataRequest, opts ...grpc.CallOption) (*ExportMetadataResponse, error)
	CheckHeaderAndUpdateState(ctx context.Context, in *CheckHeaderAndUpdateStateRequest, opts ...grpc.CallOption) (*CheckHeaderAndUpdateStateResponse, error)
	// Upgrade functions
	// NOTE: proof heights are not included as upgrade to a new revision is expected to pass only on the last
	// height committed by the current revision. Clients are responsible for ensuring that the planned last
	// height of the current revision is somehow encoded in the proof verification process.
	// This is to ensure that no premature upgrades occur, since upgrade plans committed to by the counterparty
	// may be cancelled or modified before the last planned height.
	VerifyUpgradeAndUpdateState(ctx context.Context, in *VerifyUpgradeAndUpdateStateRequest, opts ...grpc.CallOption) (*VerifyUpgradeAndUpdateStateResponse, error)
	// Utility function that zeroes out any client customizable fields in client state
	// Ledger enforced fields are maintained while all custom fields are zero values
	// Used to verify upgrades
	ZeroCustomFields(ctx context.Context, in *ZeroCustomFieldsRequest, opts ...grpc.CallOption) (*ZeroCustomFieldsResponse, error)
	VerifyClientState(ctx context.Context, in *VerifyClientStateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	VerifyClientConsensusState(ctx context.Context, in *VerifyClientConsensusStateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	VerifyConnectionState(ctx context.Context, in *VerifyConnectionStateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	VerifyChannelState(ctx context.Context, in *VerifyChannelStateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	VerifyPacketCommitment(ctx context.Context, in *VerifyPacketCommitmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	VerifyPacketAcknowledgement(ctx context.Context, in *VerifyPacketAcknowledgementRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	VerifyPacketReceiptAbsence(ctx context.Context, in *VerifyPacketReceiptAbsenceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	VerifyNextSequenceRecv(ctx context.Context, in *VerifyNextSequenceRecvRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type lightClientClient struct {
	cc grpc1.ClientConn
}

func NewLightClientClient(cc grpc1.ClientConn) LightClientClient {
	return &lightClientClient{cc}
}

func (c *lightClientClient) ClientType(ctx context.Context, in *ClientTypeRequest, opts ...grpc.CallOption) (*ClientTypeResponse, error) {
	out := new(ClientTypeResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclientd.fabric.v1.LightClient/ClientType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightClientClient) GetLatestHeight(ctx context.Context, in *GetLatestHeightRequest, opts ...grpc.CallOption) (*GetLatestHeightResponse, error) {
	out := new(GetLatestHeightResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclientd.fabric.v1.LightClient/GetLatestHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightClientClient) Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ibc.lightclientd.fabric.v1.LightClient/Validate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightClientClient) GetProofSpecs(ctx context.Context, in *GetProofSpecsRequest, opts ...grpc.CallOption) (*GetProofSpecsResponse, error) {
	out := new(GetProofSpecsResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclientd.fabric.v1.LightClient/GetProofSpecs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightClientClient) Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*InitializeResponse, error) {
	out := new(InitializeResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclientd.fabric.v1.LightClient/Initialize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightClientClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclientd.fabric.v1.LightClient/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightClientClient) ExportMetadata(ctx context.Context, in *ExportMetadataRequest, opts ...grpc.CallOption) (*ExportMetadataResponse, error) {
	out := new(ExportMetadataResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclientd.fabric.v1.LightClient/ExportMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightClientClient) CheckHeaderAndUpdateState(ctx context.Context, in *CheckHeaderAndUpdateStateRequest, opts ...grpc.CallOption) (*CheckHeaderAndUpdateStateResponse, error) {
	out := new(CheckHeaderAndUpdateStateResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclientd.fabric.v1.LightClient/CheckHeaderAndUpdateState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightClientClient) VerifyUpgradeAndUpdateState(ctx context.Context, in *VerifyUpgradeAndUpdateStateRequest, opts ...grpc.CallOption) (*VerifyUpgradeAndUpdateStateResponse, error) {
	out := new(VerifyUpgradeAndUpdateStateResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclientd.fabric.v1.LightClient/VerifyUpgradeAndUpdateState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightClientClient) ZeroCustomFields(ctx context.Context, in *ZeroCustomFieldsRequest, opts ...grpc.CallOption) (*ZeroCustomFieldsResponse, error) {
	out := new(ZeroCustomFieldsResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclientd.fabric.v1.LightClient/ZeroCustomFields", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightClientClient) VerifyClientState(ctx context.Context, in *VerifyClientStateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ibc.lightclientd.fabric.v1.LightClient/VerifyClientState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightClientClient) VerifyClientConsensusState(ctx context.Context, in *VerifyClientConsensusStateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ibc.lightclientd.fabric.v1.LightClient/VerifyClientConsensusState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightClientClient) VerifyConnectionState(ctx context.Context, in *VerifyConnectionStateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ibc.lightclientd.fabric.v1.LightClient/VerifyConnectionState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightClientClient) VerifyChannelState(ctx context.Context, in *VerifyChannelStateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ibc.lightclientd.fabric.v1.LightClient/VerifyChannelState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightClientClient) VerifyPacketCommitment(ctx context.Context, in *VerifyPacketCommitmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ibc.lightclientd.fabric.v1.LightClient/VerifyPacketCommitment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightClientClient) VerifyPacketAcknowledgement(ctx context.Context, in *VerifyPacketAcknowledgementRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ibc.lightclientd.fabric.v1.LightClient/VerifyPacketAcknowledgement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightClientClient) VerifyPacketReceiptAbsence(ctx context.Context, in *VerifyPacketReceiptAbsenceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ibc.lightclientd.fabric.v1.LightClient/VerifyPacketReceiptAbsence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightClientClient) VerifyNextSequenceRecv(ctx context.Context, in *VerifyNextSequenceRecvRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ibc.lightclientd.fabric.v1.LightClient/VerifyNextSequenceRecv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LightClientServer is the server API for LightClient service.
type LightClientServer interface {
	ClientType(context.Context, *ClientTypeRequest) (*ClientTypeResponse, error)
	GetLatestHeight(context.Context, *GetLatestHeightRequest) (*GetLatestHeightResponse, error)
	Validate(context.Context, *ValidateRequest) (*emptypb.Empty, error)
	GetProofSpecs(context.Context, *GetProofSpecsRequest) (*GetProofSpecsResponse, error)
	// Initialization function
	// Clients must validate the initial consensus state, and may store any client-specific metadata
	// necessary for correct light client operation
	Initialize(context.Context, *InitializeRequest) (*InitializeResponse, error)
	// Status function
	// Clients must return their status. Only Active clients are allowed to process packets.
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	// Genesis function
	ExportMetadata(context.Context, *ExportMetadataRequest) (*ExportMetadataResponse, error)
	CheckHeaderAndUpdateState(context.Context, *CheckHeaderAndUpdateStateRequest) (*CheckHeaderAndUpdateStateResponse, error)
	// Upgrade functions
	// NOTE: proof heights are not included as upgrade to a new revision is expected to pass only on the last
	// height committed by the current revision. Clients are responsible for ensuring that the planned last
	// height of the current revision is somehow encoded in the proof verification process.
	// This is to ensure that no premature upgrades occur, since upgrade plans committed to by the counterparty
	// may be cancelled or modified before the last planned height.
	VerifyUpgradeAndUpdateState(context.Context, *VerifyUpgradeAndUpdateStateRequest) (*VerifyUpgradeAndUpdateStateResponse, error)
	// Utility function that zeroes out any client customizable fields in client state
	// Ledger enforced fields are maintained while all custom fields are zero values
	// Used to verify upgrades
	ZeroCustomFields(context.Context, *ZeroCustomFieldsRequest) (*ZeroCustomFieldsResponse, error)
	VerifyClientState(context.Context, *VerifyClientStateRequest) (*emptypb.Empty, error)
	VerifyClientConsensusState(context.Context, *VerifyClientConsensusStateRequest) (*emptypb.Empty, error)
	VerifyConnectionState(context.Context, *VerifyConnectionStateRequest) (*emptypb.Empty, error)
	VerifyChannelState(context.Context, *VerifyChannelStateRequest) (*emptypb.Empty, error)
	VerifyPacketCommitment(context.Context, *VerifyPacketCommitmentRequest) (*emptypb.Empty, error)
	VerifyPacketAcknowledgement(context.Context, *VerifyPacketAcknowledgementRequest) (*emptypb.Empty, error)
	VerifyPacketReceiptAbsence(context.Context, *VerifyPacketReceiptAbsenceRequest) (*emptypb.Empty, error)
	VerifyNextSequenceRecv(context.Context, *VerifyNextSequenceRecvRequest) (*emptypb.Empty, error)
}

// UnimplementedLightClientServer can be embedded to have forward compatible implementations.
type UnimplementedLightClientServer struct {
}

func (*UnimplementedLightClientServer) ClientType(ctx context.Context, req *ClientTypeRequest) (*ClientTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientType not implemented")
}
func (*UnimplementedLightClientServer) GetLatestHeight(ctx context.Context, req *GetLatestHeightRequest) (*GetLatestHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestHeight not implemented")
}
func (*UnimplementedLightClientServer) Validate(ctx context.Context, req *ValidateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (*UnimplementedLightClientServer) GetProofSpecs(ctx context.Context, req *GetProofSpecsRequest) (*GetProofSpecsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProofSpecs not implemented")
}
func (*UnimplementedLightClientServer) Initialize(ctx context.Context, req *InitializeRequest) (*InitializeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initialize not implemented")
}
func (*UnimplementedLightClientServer) Status(ctx context.Context, req *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedLightClientServer) ExportMetadata(ctx context.Context, req *ExportMetadataRequest) (*ExportMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportMetadata not implemented")
}
func (*UnimplementedLightClientServer) CheckHeaderAndUpdateState(ctx context.Context, req *CheckHeaderAndUpdateStateRequest) (*CheckHeaderAndUpdateStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHeaderAndUpdateState not implemented")
}
func (*UnimplementedLightClientServer) VerifyUpgradeAndUpdateState(ctx context.Context, req *VerifyUpgradeAndUpdateStateRequest) (*VerifyUpgradeAndUpdateStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyUpgradeAndUpdateState not implemented")
}
func (*UnimplementedLightClientServer) ZeroCustomFields(ctx context.Context, req *ZeroCustomFieldsRequest) (*ZeroCustomFieldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZeroCustomFields not implemented")
}
func (*UnimplementedLightClientServer) VerifyClientState(ctx context.Context, req *VerifyClientStateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyClientState not implemented")
}
func (*UnimplementedLightClientServer) VerifyClientConsensusState(ctx context.Context, req *VerifyClientConsensusStateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyClientConsensusState not implemented")
}
func (*UnimplementedLightClientServer) VerifyConnectionState(ctx context.Context, req *VerifyConnectionStateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyConnectionState not implemented")
}
func (*UnimplementedLightClientServer) VerifyChannelState(ctx context.Context, req *VerifyChannelStateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyChannelState not implemented")
}
func (*UnimplementedLightClientServer) VerifyPacketCommitment(ctx context.Context, req *VerifyPacketCommitmentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPacketCommitment not implemented")
}
func (*UnimplementedLightClientServer) VerifyPacketAcknowledgement(ctx context.Context, req *VerifyPacketAcknowledgementRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPacketAcknowledgement not implemented")
}
func (*UnimplementedLightClientServer) VerifyPacketReceiptAbsence(ctx context.Context, req *VerifyPacketReceiptAbsenceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPacketReceiptAbsence not implemented")
}
func (*UnimplementedLightClientServer) VerifyNextSequenceRecv(ctx context.Context, req *VerifyNextSequenceRecvRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyNextSequenceRecv not implemented")
}

func RegisterLightClientServer(s grpc1.Server, srv LightClientServer) {
	s.RegisterService(&_LightClient_serviceDesc, srv)
}

func _LightClient_ClientType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightClientServer).ClientType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclientd.fabric.v1.LightClient/ClientType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightClientServer).ClientType(ctx, req.(*ClientTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightClient_GetLatestHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightClientServer).GetLatestHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclientd.fabric.v1.LightClient/GetLatestHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightClientServer).GetLatestHeight(ctx, req.(*GetLatestHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightClient_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightClientServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclientd.fabric.v1.LightClient/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightClientServer).Validate(ctx, req.(*ValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightClient_GetProofSpecs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProofSpecsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightClientServer).GetProofSpecs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclientd.fabric.v1.LightClient/GetProofSpecs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightClientServer).GetProofSpecs(ctx, req.(*GetProofSpecsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightClient_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightClientServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclientd.fabric.v1.LightClient/Initialize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightClientServer).Initialize(ctx, req.(*InitializeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightClient_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightClientServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclientd.fabric.v1.LightClient/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightClientServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightClient_ExportMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightClientServer).ExportMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclientd.fabric.v1.LightClient/ExportMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightClientServer).ExportMetadata(ctx, req.(*ExportMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightClient_CheckHeaderAndUpdateState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckHeaderAndUpdateStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightClientServer).CheckHeaderAndUpdateState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclientd.fabric.v1.LightClient/CheckHeaderAndUpdateState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightClientServer).CheckHeaderAndUpdateState(ctx, req.(*CheckHeaderAndUpdateStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightClient_VerifyUpgradeAndUpdateState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyUpgradeAndUpdateStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightClientServer).VerifyUpgradeAndUpdateState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclientd.fabric.v1.LightClient/VerifyUpgradeAndUpdateState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightClientServer).VerifyUpgradeAndUpdateState(ctx, req.(*VerifyUpgradeAndUpdateStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightClient_ZeroCustomFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZeroCustomFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightClientServer).ZeroCustomFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclientd.fabric.v1.LightClient/ZeroCustomFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightClientServer).ZeroCustomFields(ctx, req.(*ZeroCustomFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightClient_VerifyClientState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyClientStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightClientServer).VerifyClientState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclientd.fabric.v1.LightClient/VerifyClientState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightClientServer).VerifyClientState(ctx, req.(*VerifyClientStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightClient_VerifyClientConsensusState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyClientConsensusStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightClientServer).VerifyClientConsensusState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclientd.fabric.v1.LightClient/VerifyClientConsensusState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightClientServer).VerifyClientConsensusState(ctx, req.(*VerifyClientConsensusStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightClient_VerifyConnectionState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyConnectionStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightClientServer).VerifyConnectionState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclientd.fabric.v1.LightClient/VerifyConnectionState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightClientServer).VerifyConnectionState(ctx, req.(*VerifyConnectionStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightClient_VerifyChannelState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyChannelStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightClientServer).VerifyChannelState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclientd.fabric.v1.LightClient/VerifyChannelState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightClientServer).VerifyChannelState(ctx, req.(*VerifyChannelStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightClient_VerifyPacketCommitment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyPacketCommitmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightClientServer).VerifyPacketCommitment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclientd.fabric.v1.LightClient/VerifyPacketCommitment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightClientServer).VerifyPacketCommitment(ctx, req.(*VerifyPacketCommitmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightClient_VerifyPacketAcknowledgement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyPacketAcknowledgementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightClientServer).VerifyPacketAcknowledgement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclientd.fabric.v1.LightClient/VerifyPacketAcknowledgement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightClientServer).VerifyPacketAcknowledgement(ctx, req.(*VerifyPacketAcknowledgementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightClient_VerifyPacketReceiptAbsence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyPacketReceiptAbsenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightClientServer).VerifyPacketReceiptAbsence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclientd.fabric.v1.LightClient/VerifyPacketReceiptAbsence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightClientServer).VerifyPacketReceiptAbsence(ctx, req.(*VerifyPacketReceiptAbsenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightClient_VerifyNextSequenceRecv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyNextSequenceRecvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightClientServer).VerifyNextSequenceRecv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclientd.fabric.v1.LightClient/VerifyNextSequenceRecv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightClientServer).VerifyNextSequenceRecv(ctx, req.(*VerifyNextSequenceRecvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LightClient_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ibc.lightclientd.fabric.v1.LightClient",
	HandlerType: (*LightClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClientType",
			Handler:    _LightClient_ClientType_Handler,
		},
		{
			MethodName: "GetLatestHeight",
			Handler:    _LightClient_GetLatestHeight_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _LightClient_Validate_Handler,
		},
		{
			MethodName: "GetProofSpecs",
			Handler:    _LightClient_GetProofSpecs_Handler,
		},
		{
			MethodName: "Initialize",
			Handler:    _LightClient_Initialize_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _LightClient_Status_Handler,
		},
		{
			MethodName: "ExportMetadata",
			Handler:    _LightClient_ExportMetadata_Handler,
		},
		{
			MethodName: "CheckHeaderAndUpdateState",
			Handler:    _LightClient_CheckHeaderAndUpdateState_Handler,
		},
		{
			MethodName: "VerifyUpgradeAndUpdateState",
			Handler:    _LightClient_VerifyUpgradeAndUpdateState_Handler,
		},
		{
			MethodName: "ZeroCustomFields",
			Handler:    _LightClient_ZeroCustomFields_Handler,
		},
		{
			MethodName: "VerifyClientState",
			Handler:    _LightClient_VerifyClientState_Handler,
		},
		{
			MethodName: "VerifyClientConsensusState",
			Handler:    _LightClient_VerifyClientConsensusState_Handler,
		},
		{
			MethodName: "VerifyConnectionState",
			Handler:    _LightClient_VerifyConnectionState_Handler,
		},
		{
			MethodName: "VerifyChannelState",
			Handler:    _LightClient_VerifyChannelState_Handler,
		},
		{
			MethodName: "VerifyPacketCommitment",
			Handler:    _LightClient_VerifyPacketCommitment_Handler,
		},
		{
			MethodName: "VerifyPacketAcknowledgement",
			Handler:    _LightClient_VerifyPacketAcknowledgement_Handler,
		},
		{
			MethodName: "VerifyPacketReceiptAbsence",
			Handler:    _LightClient_VerifyPacketReceiptAbsence_Handler,
		},
		{
			MethodName: "VerifyNextSequenceRecv",
			Handler:    _LightClient_VerifyNextSequenceRecv_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ibc/lightclientd/fabric/v1/fabric.proto",
}

func (m *State) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *State) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *State) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConsensusStates) > 0 {
		for k := range m.ConsensusStates {
			v := m.ConsensusStates[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintFabric(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintFabric(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintFabric(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ClientState != nil {
		{
			size, err := m.ClientState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClientTypeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientTypeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientTypeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClientTypeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientTypeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientTypeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClientType) > 0 {
		i -= len(m.ClientType)
		copy(dAtA[i:], m.ClientType)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.ClientType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetLatestHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLatestHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLatestHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetLatestHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLatestHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLatestHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != nil {
		{
			size, err := m.Height.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetProofSpecsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetProofSpecsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetProofSpecsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetProofSpecsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetProofSpecsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetProofSpecsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProofSpecs) > 0 {
		for iNdEx := len(m.ProofSpecs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProofSpecs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFabric(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *InitializeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitializeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitializeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConsensusState != nil {
		{
			size, err := m.ConsensusState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InitializeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitializeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitializeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExportMetadataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExportMetadataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExportMetadataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExportMetadataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExportMetadataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExportMetadataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GenesisMetadatas) > 0 {
		for iNdEx := len(m.GenesisMetadatas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GenesisMetadatas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFabric(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CheckHeaderAndUpdateStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckHeaderAndUpdateStateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckHeaderAndUpdateStateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CheckHeaderAndUpdateStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckHeaderAndUpdateStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckHeaderAndUpdateStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifyUpgradeAndUpdateStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyUpgradeAndUpdateStateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyUpgradeAndUpdateStateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProofUpgradeConsState) > 0 {
		i -= len(m.ProofUpgradeConsState)
		copy(dAtA[i:], m.ProofUpgradeConsState)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.ProofUpgradeConsState)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ProofUpgradeClient) > 0 {
		i -= len(m.ProofUpgradeClient)
		copy(dAtA[i:], m.ProofUpgradeClient)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.ProofUpgradeClient)))
		i--
		dAtA[i] = 0x22
	}
	if m.NewConsState != nil {
		{
			size, err := m.NewConsState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.NewClient != nil {
		{
			size, err := m.NewClient.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifyUpgradeAndUpdateStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyUpgradeAndUpdateStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyUpgradeAndUpdateStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ZeroCustomFieldsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZeroCustomFieldsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZeroCustomFieldsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ZeroCustomFieldsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZeroCustomFieldsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZeroCustomFieldsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClientState != nil {
		{
			size, err := m.ClientState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifyClientStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyClientStateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyClientStateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClientState != nil {
		{
			size, err := m.ClientState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CounterpartyClientIdentifier) > 0 {
		i -= len(m.CounterpartyClientIdentifier)
		copy(dAtA[i:], m.CounterpartyClientIdentifier)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.CounterpartyClientIdentifier)))
		i--
		dAtA[i] = 0x22
	}
	if m.Prefix != nil {
		{
			size, err := m.Prefix.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != nil {
		{
			size, err := m.Height.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifyClientConsensusStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyClientConsensusStateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyClientConsensusStateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConsensusState != nil {
		{
			size, err := m.ConsensusState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x32
	}
	if m.Prefix != nil {
		{
			size, err := m.Prefix.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ConsensusHeight != nil {
		{
			size, err := m.ConsensusHeight.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.CounterpartyClientIdentifier) > 0 {
		i -= len(m.CounterpartyClientIdentifier)
		copy(dAtA[i:], m.CounterpartyClientIdentifier)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.CounterpartyClientIdentifier)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != nil {
		{
			size, err := m.Height.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifyConnectionStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyConnectionStateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyConnectionStateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConnectionEnd != nil {
		{
			size, err := m.ConnectionEnd.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x22
	}
	if m.Prefix != nil {
		{
			size, err := m.Prefix.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != nil {
		{
			size, err := m.Height.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifyChannelStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyChannelStateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyChannelStateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Channel != nil {
		{
			size, err := m.Channel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x22
	}
	if m.Prefix != nil {
		{
			size, err := m.Prefix.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != nil {
		{
			size, err := m.Height.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifyPacketCommitmentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyPacketCommitmentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyPacketCommitmentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CommitmentBytes) > 0 {
		i -= len(m.CommitmentBytes)
		copy(dAtA[i:], m.CommitmentBytes)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.CommitmentBytes)))
		i--
		dAtA[i] = 0x52
	}
	if m.Sequence != 0 {
		i = encodeVarintFabric(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x48
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x32
	}
	if m.Prefix != nil {
		{
			size, err := m.Prefix.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.DelayBlockPeriod != 0 {
		i = encodeVarintFabric(dAtA, i, uint64(m.DelayBlockPeriod))
		i--
		dAtA[i] = 0x20
	}
	if m.DelayTimePeriod != 0 {
		i = encodeVarintFabric(dAtA, i, uint64(m.DelayTimePeriod))
		i--
		dAtA[i] = 0x18
	}
	if m.Height != nil {
		{
			size, err := m.Height.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifyPacketAcknowledgementRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyPacketAcknowledgementRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyPacketAcknowledgementRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Acknowledgement) > 0 {
		i -= len(m.Acknowledgement)
		copy(dAtA[i:], m.Acknowledgement)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.Acknowledgement)))
		i--
		dAtA[i] = 0x52
	}
	if m.Sequence != 0 {
		i = encodeVarintFabric(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x48
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x32
	}
	if m.Prefix != nil {
		{
			size, err := m.Prefix.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.DelayBlockPeriod != 0 {
		i = encodeVarintFabric(dAtA, i, uint64(m.DelayBlockPeriod))
		i--
		dAtA[i] = 0x20
	}
	if m.DelayTimePeriod != 0 {
		i = encodeVarintFabric(dAtA, i, uint64(m.DelayTimePeriod))
		i--
		dAtA[i] = 0x18
	}
	if m.Height != nil {
		{
			size, err := m.Height.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifyPacketReceiptAbsenceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyPacketReceiptAbsenceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyPacketReceiptAbsenceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sequence != 0 {
		i = encodeVarintFabric(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x48
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x32
	}
	if m.Prefix != nil {
		{
			size, err := m.Prefix.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.DelayBlockPeriod != 0 {
		i = encodeVarintFabric(dAtA, i, uint64(m.DelayBlockPeriod))
		i--
		dAtA[i] = 0x20
	}
	if m.DelayTimePeriod != 0 {
		i = encodeVarintFabric(dAtA, i, uint64(m.DelayTimePeriod))
		i--
		dAtA[i] = 0x18
	}
	if m.Height != nil {
		{
			size, err := m.Height.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifyNextSequenceRecvRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyNextSequenceRecvRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyNextSequenceRecvRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextSequenceRecv != 0 {
		i = encodeVarintFabric(dAtA, i, uint64(m.NextSequenceRecv))
		i--
		dAtA[i] = 0x48
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintFabric(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x32
	}
	if m.Prefix != nil {
		{
			size, err := m.Prefix.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.DelayBlockPeriod != 0 {
		i = encodeVarintFabric(dAtA, i, uint64(m.DelayBlockPeriod))
		i--
		dAtA[i] = 0x20
	}
	if m.DelayTimePeriod != 0 {
		i = encodeVarintFabric(dAtA, i, uint64(m.DelayTimePeriod))
		i--
		dAtA[i] = 0x18
	}
	if m.Height != nil {
		{
			size, err := m.Height.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFabric(dAtA []byte, offset int, v uint64) int {
	offset -= sovFabric(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *State) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.ClientState != nil {
		l = m.ClientState.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	if len(m.ConsensusStates) > 0 {
		for k, v := range m.ConsensusStates {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFabric(uint64(l))
			}
			mapEntrySize := 1 + sovFabric(uint64(k)) + l
			n += mapEntrySize + 1 + sovFabric(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ClientTypeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *ClientTypeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClientType)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *GetLatestHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *GetLatestHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != nil {
		l = m.Height.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *ValidateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *GetProofSpecsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *GetProofSpecsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ProofSpecs) > 0 {
		for _, e := range m.ProofSpecs {
			l = e.Size()
			n += 1 + l + sovFabric(uint64(l))
		}
	}
	return n
}

func (m *InitializeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.ConsensusState != nil {
		l = m.ConsensusState.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *InitializeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *StatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *StatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *ExportMetadataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *ExportMetadataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GenesisMetadatas) > 0 {
		for _, e := range m.GenesisMetadatas {
			l = e.Size()
			n += 1 + l + sovFabric(uint64(l))
		}
	}
	return n
}

func (m *CheckHeaderAndUpdateStateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *CheckHeaderAndUpdateStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *VerifyUpgradeAndUpdateStateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.NewClient != nil {
		l = m.NewClient.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.NewConsState != nil {
		l = m.NewConsState.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	l = len(m.ProofUpgradeClient)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	l = len(m.ProofUpgradeConsState)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *VerifyUpgradeAndUpdateStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *ZeroCustomFieldsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *ZeroCustomFieldsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientState != nil {
		l = m.ClientState.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *VerifyClientStateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.Height != nil {
		l = m.Height.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.Prefix != nil {
		l = m.Prefix.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	l = len(m.CounterpartyClientIdentifier)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.ClientState != nil {
		l = m.ClientState.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *VerifyClientConsensusStateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.Height != nil {
		l = m.Height.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	l = len(m.CounterpartyClientIdentifier)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.ConsensusHeight != nil {
		l = m.ConsensusHeight.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.Prefix != nil {
		l = m.Prefix.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.ConsensusState != nil {
		l = m.ConsensusState.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *VerifyConnectionStateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.Height != nil {
		l = m.Height.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.Prefix != nil {
		l = m.Prefix.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.ConnectionEnd != nil {
		l = m.ConnectionEnd.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *VerifyChannelStateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.Height != nil {
		l = m.Height.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.Prefix != nil {
		l = m.Prefix.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *VerifyPacketCommitmentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.Height != nil {
		l = m.Height.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.DelayTimePeriod != 0 {
		n += 1 + sovFabric(uint64(m.DelayTimePeriod))
	}
	if m.DelayBlockPeriod != 0 {
		n += 1 + sovFabric(uint64(m.DelayBlockPeriod))
	}
	if m.Prefix != nil {
		l = m.Prefix.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.Sequence != 0 {
		n += 1 + sovFabric(uint64(m.Sequence))
	}
	l = len(m.CommitmentBytes)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *VerifyPacketAcknowledgementRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.Height != nil {
		l = m.Height.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.DelayTimePeriod != 0 {
		n += 1 + sovFabric(uint64(m.DelayTimePeriod))
	}
	if m.DelayBlockPeriod != 0 {
		n += 1 + sovFabric(uint64(m.DelayBlockPeriod))
	}
	if m.Prefix != nil {
		l = m.Prefix.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.Sequence != 0 {
		n += 1 + sovFabric(uint64(m.Sequence))
	}
	l = len(m.Acknowledgement)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	return n
}

func (m *VerifyPacketReceiptAbsenceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.Height != nil {
		l = m.Height.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.DelayTimePeriod != 0 {
		n += 1 + sovFabric(uint64(m.DelayTimePeriod))
	}
	if m.DelayBlockPeriod != 0 {
		n += 1 + sovFabric(uint64(m.DelayBlockPeriod))
	}
	if m.Prefix != nil {
		l = m.Prefix.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.Sequence != 0 {
		n += 1 + sovFabric(uint64(m.Sequence))
	}
	return n
}

func (m *VerifyNextSequenceRecvRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.Height != nil {
		l = m.Height.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.DelayTimePeriod != 0 {
		n += 1 + sovFabric(uint64(m.DelayTimePeriod))
	}
	if m.DelayBlockPeriod != 0 {
		n += 1 + sovFabric(uint64(m.DelayBlockPeriod))
	}
	if m.Prefix != nil {
		l = m.Prefix.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.NextSequenceRecv != 0 {
		n += 1 + sovFabric(uint64(m.NextSequenceRecv))
	}
	return n
}

func sovFabric(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFabric(x uint64) (n int) {
	return sovFabric(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *State) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: State: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: State: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientState == nil {
				m.ClientState = &types.ClientState{}
			}
			if err := m.ClientState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusStates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConsensusStates == nil {
				m.ConsensusStates = make(map[uint64]*types.ConsensusState)
			}
			var mapkey uint64
			var mapvalue *types.ConsensusState
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFabric
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFabric
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFabric
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFabric
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthFabric
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &types.ConsensusState{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFabric(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFabric
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ConsensusStates[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientTypeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientTypeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientTypeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientTypeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientTypeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientTypeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLatestHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLatestHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLatestHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLatestHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLatestHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLatestHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Height == nil {
				m.Height = &types1.Height{}
			}
			if err := m.Height.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetProofSpecsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetProofSpecsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetProofSpecsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetProofSpecsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetProofSpecsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetProofSpecsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofSpecs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofSpecs = append(m.ProofSpecs, &_go.ProofSpec{})
			if err := m.ProofSpecs[len(m.ProofSpecs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitializeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitializeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitializeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConsensusState == nil {
				m.ConsensusState = &types.ConsensusState{}
			}
			if err := m.ConsensusState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitializeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitializeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitializeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExportMetadataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExportMetadataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExportMetadataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExportMetadataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExportMetadataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExportMetadataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisMetadatas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GenesisMetadatas = append(m.GenesisMetadatas, &types1.GenesisMetadata{})
			if err := m.GenesisMetadatas[len(m.GenesisMetadatas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckHeaderAndUpdateStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckHeaderAndUpdateStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckHeaderAndUpdateStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &types.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckHeaderAndUpdateStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckHeaderAndUpdateStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckHeaderAndUpdateStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyUpgradeAndUpdateStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyUpgradeAndUpdateStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyUpgradeAndUpdateStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewClient", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewClient == nil {
				m.NewClient = &types.ClientState{}
			}
			if err := m.NewClient.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewConsState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewConsState == nil {
				m.NewConsState = &types.ConsensusState{}
			}
			if err := m.NewConsState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofUpgradeClient", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofUpgradeClient = append(m.ProofUpgradeClient[:0], dAtA[iNdEx:postIndex]...)
			if m.ProofUpgradeClient == nil {
				m.ProofUpgradeClient = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofUpgradeConsState", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofUpgradeConsState = append(m.ProofUpgradeConsState[:0], dAtA[iNdEx:postIndex]...)
			if m.ProofUpgradeConsState == nil {
				m.ProofUpgradeConsState = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyUpgradeAndUpdateStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyUpgradeAndUpdateStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyUpgradeAndUpdateStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZeroCustomFieldsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZeroCustomFieldsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZeroCustomFieldsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZeroCustomFieldsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZeroCustomFieldsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZeroCustomFieldsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientState == nil {
				m.ClientState = &types.ClientState{}
			}
			if err := m.ClientState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyClientStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyClientStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyClientStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Height == nil {
				m.Height = &types1.Height{}
			}
			if err := m.Height.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Prefix == nil {
				m.Prefix = &types2.MerklePrefix{}
			}
			if err := m.Prefix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterpartyClientIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CounterpartyClientIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientState == nil {
				m.ClientState = &types3.Any{}
			}
			if err := m.ClientState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyClientConsensusStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyClientConsensusStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyClientConsensusStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Height == nil {
				m.Height = &types1.Height{}
			}
			if err := m.Height.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterpartyClientIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CounterpartyClientIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConsensusHeight == nil {
				m.ConsensusHeight = &types1.Height{}
			}
			if err := m.ConsensusHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Prefix == nil {
				m.Prefix = &types2.MerklePrefix{}
			}
			if err := m.Prefix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConsensusState == nil {
				m.ConsensusState = &types3.Any{}
			}
			if err := m.ConsensusState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyConnectionStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyConnectionStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyConnectionStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Height == nil {
				m.Height = &types1.Height{}
			}
			if err := m.Height.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Prefix == nil {
				m.Prefix = &types2.MerklePrefix{}
			}
			if err := m.Prefix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionEnd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConnectionEnd == nil {
				m.ConnectionEnd = &types4.ConnectionEnd{}
			}
			if err := m.ConnectionEnd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyChannelStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyChannelStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyChannelStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Height == nil {
				m.Height = &types1.Height{}
			}
			if err := m.Height.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Prefix == nil {
				m.Prefix = &types2.MerklePrefix{}
			}
			if err := m.Prefix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &types5.Channel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyPacketCommitmentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyPacketCommitmentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyPacketCommitmentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Height == nil {
				m.Height = &types1.Height{}
			}
			if err := m.Height.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelayTimePeriod", wireType)
			}
			m.DelayTimePeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelayTimePeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelayBlockPeriod", wireType)
			}
			m.DelayBlockPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelayBlockPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Prefix == nil {
				m.Prefix = &types2.MerklePrefix{}
			}
			if err := m.Prefix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitmentBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommitmentBytes = append(m.CommitmentBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.CommitmentBytes == nil {
				m.CommitmentBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyPacketAcknowledgementRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyPacketAcknowledgementRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyPacketAcknowledgementRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Height == nil {
				m.Height = &types1.Height{}
			}
			if err := m.Height.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelayTimePeriod", wireType)
			}
			m.DelayTimePeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelayTimePeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelayBlockPeriod", wireType)
			}
			m.DelayBlockPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelayBlockPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Prefix == nil {
				m.Prefix = &types2.MerklePrefix{}
			}
			if err := m.Prefix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Acknowledgement", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Acknowledgement = append(m.Acknowledgement[:0], dAtA[iNdEx:postIndex]...)
			if m.Acknowledgement == nil {
				m.Acknowledgement = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyPacketReceiptAbsenceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyPacketReceiptAbsenceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyPacketReceiptAbsenceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Height == nil {
				m.Height = &types1.Height{}
			}
			if err := m.Height.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelayTimePeriod", wireType)
			}
			m.DelayTimePeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelayTimePeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelayBlockPeriod", wireType)
			}
			m.DelayBlockPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelayBlockPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Prefix == nil {
				m.Prefix = &types2.MerklePrefix{}
			}
			if err := m.Prefix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyNextSequenceRecvRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyNextSequenceRecvRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyNextSequenceRecvRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Height == nil {
				m.Height = &types1.Height{}
			}
			if err := m.Height.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelayTimePeriod", wireType)
			}
			m.DelayTimePeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelayTimePeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelayBlockPeriod", wireType)
			}
			m.DelayBlockPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelayBlockPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Prefix == nil {
				m.Prefix = &types2.MerklePrefix{}
			}
			if err := m.Prefix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextSequenceRecv", wireType)
			}
			m.NextSequenceRecv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextSequenceRecv |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFabric(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFabric
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFabric
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFabric
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFabric        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFabric          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFabric = fmt.Errorf("proto: unexpected end of group")
)
